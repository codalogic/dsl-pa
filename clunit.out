Tests run on Sun May 27 16:36:53 2012


    Alphabet tests [c:\home\pete\sw\dsl-pa\test\alphabet-test.cpp:42]
    ==========================
      Word char alphabet
    ok: my_alphabet.is_wanted( 'b' )
    ok: ! my_alphabet.is_wanted( '$' )
    ok: ! my_alphabet.is_wanted( ' ' )
      Check word char alphabet polymorphism!
    ok: p_my_alphabet->is_wanted( 'b' )
    ok: ! p_my_alphabet->is_wanted( '$' )
    ok: ! p_my_alphabet->is_wanted( ' ' )
      Whitespace alphabet
    ok: my_space_alphabet.is_wanted( ' ' )
    ok: my_space_alphabet.is_wanted( '\t' )
    ok: ! my_space_alphabet.is_wanted( 'A' )
      Digit alphabet
    ok: my_digit_alphabet.is_wanted( '0' )
    ok: my_digit_alphabet.is_wanted( '5' )
    ok: my_digit_alphabet.is_wanted( '9' )
    ok: ! my_digit_alphabet.is_wanted( 'a' )
      Hex alphabet
    ok: my_hex_alphabet.is_wanted( '0' )
    ok: my_hex_alphabet.is_wanted( '5' )
    ok: my_hex_alphabet.is_wanted( '9' )
    ok: my_hex_alphabet.is_wanted( 'A' )
    ok: my_hex_alphabet.is_wanted( 'C' )
    ok: my_hex_alphabet.is_wanted( 'F' )
    ok: my_hex_alphabet.is_wanted( 'a' )
    ok: my_hex_alphabet.is_wanted( 'c' )
    ok: my_hex_alphabet.is_wanted( 'f' )
    ok: ! my_hex_alphabet.is_wanted( 'G' )
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )


    Alphabet combiners tests [c:\home\pete\sw\dsl-pa\test\alphabet-test.cpp:88]
    ==========================
    ok: alphabet_digit().is_wanted( '1' )
    ok: alphabet_not( alphabet_digit() ).is_wanted( 'x' )
    ok: alphabet_or( alphabet_space(), alphabet_digit() ).is_wanted( '5' )
    ok: alphabet_or( alphabet_space(), alphabet_digit() ).is_wanted( ' ' )
    ok: ! alphabet_or( alphabet_space(), alphabet_digit() ).is_wanted( 'x' )
    ok: alphabet_not( alphabet_or( alphabet_space(), alphabet_digit() ) ).is_wanted( 'x' )
    ok: alphabet_or( alphabet_space(), alphabet_or( alphabet_digit(), alphabet_uni() ) ).is_wanted( ' ' )
    ok: alphabet_or( alphabet_space(), alphabet_or( alphabet_digit(), alphabet_uni() ) ).is_wanted( '5' )
    ok: alphabet_or( alphabet_space(), alphabet_or( alphabet_digit(), alphabet_uni() ) ).is_wanted( '\x80' )
    ok: ! alphabet_or( alphabet_space(), alphabet_or( alphabet_digit(), alphabet_uni() ) ).is_wanted( '$' )
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )


    Alphabet typedefed tests [c:\home\pete\sw\dsl-pa\test\alphabet-test.cpp:106]
    ==========================
    ok: number().is_wanted( '1' )
    ok: name().is_wanted( 'g' )
    ok: ! name().is_wanted( '1' )
    ok: invert( number() ).is_wanted( 'x' )
    ok: either( name(), number() ).is_wanted( '5' )
    ok: either( name(), number() ).is_wanted( 'j' )
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )


    Alphabet short_alphabets tests [c:\home\pete\sw\dsl-pa\test\alphabet-test.cpp:128]
    ==========================
    ok: digit().is_wanted( '1' )
    ok: not( digit() ).is_wanted( 'x' )
    ok: or( space(), digit() ).is_wanted( '5' )
    ok: alpha().is_wanted( 'a' )
    ok: linear_space().is_wanted( ' ' )
    ok: linear_space().is_wanted( '\t' )
    ok: ! linear_space().is_wanted( 'x' )
    ok: sign().is_wanted( '+' )
    ok: sign().is_wanted( '-' )
    ok: ! sign().is_wanted( 'x' )
    ok: point().is_wanted( '.' )
    ok: ! point().is_wanted( 'x' )
    ok: dot().is_wanted( '.' )
    ok: ! dot().is_wanted( 'x' )
    ok: exponent().is_wanted( 'e' )
    ok: exponent().is_wanted( 'E' )
    ok: ! exponent().is_wanted( 'x' )
    ok: dash().is_wanted( '-' )
    ok: ! dash().is_wanted( 'x' )
    ok: colon().is_wanted( ':' )
    ok: ! colon().is_wanted( 'x' )
    ok: semicolon().is_wanted( ';' )
    ok: ! semicolon().is_wanted( 'x' )
    ok: comma().is_wanted( ',' )
    ok: ! comma().is_wanted( 'x' )
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )


    dsl_pa::optional() operation [c:\home\pete\sw\dsl-pa\test\dsl-pa-test.cpp:69]
    ==========================
    ok: dsl_pa::optional( is_false_optional_test_helper() )
    ok: dsl_pa::optional( is_true_optional_test_helper() )
    ok: dsl_pa::optional( size_0_optional_test_helper() )
    ok: dsl_pa::optional( size_12_optional_test_helper() )
    ok: dsl_pa::optional( int_minus_2_optional_test_helper() )
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )


    dsl_pa::set() operation [c:\home\pete\sw\dsl-pa\test\dsl-pa-test.cpp:80]
    ==========================
      : int i = 0
      : dsl_pa::set( i, 1 )
    ok: i == 1
      : dsl_pa::set( e, COLD )
    ok: e == COLD
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )


    dsl_pa::clear() operation [c:\home\pete\sw\dsl-pa\test\dsl-pa-test.cpp:93]
    ==========================
    ok: ! v.empty()
    ok: dsl_pa::clear( v )
    ok: v.empty()
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )


    dsl_pa::error() operation [c:\home\pete\sw\dsl-pa\test\dsl-pa-test.cpp:103]
    ==========================
    ok: is_thrown
    ok: is_thrown
    ok: r_exception.get_code() == 12
    ok: is_thrown
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )


    dsl pa low level read tests [c:\home\pete\sw\dsl-pa\test\dsl-pa-test.cpp:157]
    ==========================
    ok: my_dsl_pa.get() == 'a'
    ok: my_dsl_pa.get() == 'b'
    ok: my_dsl_pa.current() == 'b'
    ok: my_dsl_pa.current() == 'b'
    ok: my_dsl_pa.location_push()
    ok: my_dsl_pa.unget()
    ok: my_dsl_pa.get() == 'b'
    ok: my_dsl_pa.unget( 'l' )
    ok: my_dsl_pa.get() == 'l'
    ok: my_dsl_pa.peek() == 'c'
    ok: my_dsl_pa.get() == 'c'
    ok: my_dsl_pa.get() == 'd'
    ok: my_dsl_pa.get() == 'e'
    ok: my_dsl_pa.location_top()
    ok: my_dsl_pa.get() == 'c'
    ok: my_dsl_pa.location_pop()
      : location_logger my_location_logger( my_dsl_pa.get_reader() )
    ok: ! my_dsl_pa.is_char( 'x' )
    ok: my_dsl_pa.is_char( 'd' )
    ok: my_dsl_pa.get() == 'e'
    ok: my_dsl_pa.location_top()
    ok: my_dsl_pa.get() == 'd'
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )


    dsl pa ws tests [c:\home\pete\sw\dsl-pa\test\dsl-pa-test.cpp:191]
    ==========================
    ok: pa.get() == 'a' && pa.get() == 'b' && pa.ws()
    ok: pa.get() == 'c'
    ok: pa.get() == 'a' && pa.get() == 'b'
    ok: ! pa.ws()
    ok: pa.get() == 'c'
    ok: pa.get() == 'a' && pa.get() == 'b' && pa.opt_ws()
    ok: pa.get() == 'c'
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )


    dsl pa class tests [c:\home\pete\sw\dsl-pa\test\dsl-pa-test.cpp:224]
    ==========================
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )


    String reader tests [c:\home\pete\sw\dsl-pa\test\reader-test.cpp:306]
    ==========================
    String reader basic tests [c:\home\pete\sw\dsl-pa\test\reader-test.cpp:101]
    ==========================
      : std::auto_ptr< reader > p_reader( r_reader_factory.create( "abc d" ) )
    ok: p_reader.get() != 0
    ok: p_reader->get() == 'a'
    ok: p_reader->current() == 'a'
    ok: p_reader->current() == 'a'
    ok: p_reader->get() == 'b'
    ok: p_reader->current() == 'b'
    ok: p_reader->get() == 'c'
    ok: p_reader->get() == ' '
    ok: p_reader->get() == 'd'
    ok: p_reader->get() == reader::R_EOI
    ok: p_reader->current() == reader::R_EOI
      : std::auto_ptr< reader > p_reader_empty( r_reader_factory.create( "" ) )
    ok: p_reader_empty.get() != 0
    ok: p_reader_empty->get() == reader::R_EOI
    ok: p_reader_empty->current() == reader::R_EOI
    String reader location tests [c:\home\pete\sw\dsl-pa\test\reader-test.cpp:128]
    ==========================
      : std::auto_ptr< reader > p_reader( r_reader_factory.create( "abcdef" ) )
    ok: p_reader.get() != 0
    ok: p_reader->get() == 'a'
    ok: p_reader->current() == 'a'
    ok: p_reader->current() == 'a'
    ok: p_reader->get() == 'b'
    ok: p_reader->current() == 'b'
    ok: p_reader->location_push()
    ok: p_reader->get() == 'c'
    ok: p_reader->get() == 'd'
    ok: p_reader->location_push()
    ok: p_reader->get() == 'e'
    ok: p_reader->get() == 'f'
    ok: p_reader->get() == reader::R_EOI
    ok: p_reader->get() == reader::R_EOI
    ok: p_reader->location_top()
    ok: p_reader->get() == 'e'
    ok: p_reader->get() == 'f'
    ok: p_reader->location_top()
    ok: p_reader->get() == 'e'
    ok: p_reader->get() == 'f'
    ok: p_reader->location_pop()
    ok: p_reader->location_top()
    ok: p_reader->get() == 'c'
    ok: p_reader->get() == 'd'
    String reader location with newline tests [c:\home\pete\sw\dsl-pa\test\reader-test.cpp:168]
    ==========================
      : std::auto_ptr< reader > p_reader( r_reader_factory.create( "abc\ndef" ) )
    ok: p_reader.get() != 0
    ok: p_reader->get() == 'a'
    ok: p_reader->get() == 'b'
    ok: p_reader->location_push()
    ok: p_reader->get() == 'c'
    ok: p_reader->get() == '\n'
    ok: p_reader->get() == 'd'
    ok: p_reader->location_push()
    ok: p_reader->get() == 'e'
    ok: p_reader->get() == 'f'
    ok: p_reader->location_top()
    ok: p_reader->get() == 'e'
    ok: p_reader->location_pop()
    ok: p_reader->location_top()
    ok: p_reader->get() == 'c'
      : std::auto_ptr< reader > p_reader( r_reader_factory.create( "abc\r\ndef" ) )
    ok: p_reader.get() != 0
    ok: p_reader->get() == 'a'
    ok: p_reader->get() == 'b'
    ok: p_reader->location_push()
    ok: p_reader->get() == 'c'
    ok: p_reader->get() == '\r'
    ok: p_reader->get() == '\n'
    ok: p_reader->get() == 'd'
    ok: p_reader->location_push()
    ok: p_reader->get() == 'e'
    ok: p_reader->get() == 'f'
    ok: p_reader->location_top()
    ok: p_reader->get() == 'e'
    ok: p_reader->location_pop()
    ok: p_reader->location_top()
    ok: p_reader->get() == 'c'
    String reader unget/peek tests [c:\home\pete\sw\dsl-pa\test\reader-test.cpp:228]
    ==========================
      : std::auto_ptr< reader > p_reader( r_reader_factory.create( "abcdef" ) )
    ok: p_reader.get() != 0
    ok: p_reader->get() == 'a'
    ok: p_reader->get() == 'b'
      : p_reader->unget()
    ok: p_reader->current() == 'b'
    ok: p_reader->get() == 'b'
      : p_reader->unget()
    ok: p_reader->current() == 'b'
    ok: p_reader->get() == 'b'
      : p_reader->unget( 'z' )
      : p_reader->unget( 'y' )
    ok: p_reader->current() == 'b'
    ok: p_reader->get() == 'y'
    ok: p_reader->get() == 'z'
      Test peek()
    ok: p_reader->get() == 'c'
    ok: p_reader->peek() == 'd'
    ok: p_reader->peek() == 'd'
    ok: p_reader->get() == 'd'
    ok: p_reader->peek() == 'e'
    ok: p_reader->get() == 'e'
    String reader location logger tests [c:\home\pete\sw\dsl-pa\test\reader-test.cpp:258]
    ==========================
      : std::auto_ptr< reader > p_reader( r_reader_factory.create( "abcdef" ) )
    ok: p_reader.get() != 0
    ok: p_reader->get() == 'a'
    ok: p_reader->current() == 'a'
    ok: p_reader->current() == 'a'
    ok: p_reader->get() == 'b'
    ok: p_reader->current() == 'b'
    ok: p_reader->location_push()
    ok: p_reader->get() == 'c'
    ok: p_reader->get() == 'd'
      : location_logger my_location_logger( *p_reader )
    ok: p_reader->get() == 'e'
    ok: p_reader->get() == 'f'
    ok: p_reader->get() == reader::R_EOI
    ok: p_reader->get() == reader::R_EOI
    ok: p_reader->location_top()
    ok: p_reader->get() == 'e'
    ok: p_reader->get() == 'f'
    ok: p_reader->location_top()
    ok: p_reader->get() == 'e'
    ok: p_reader->get() == 'f'
    ok: p_reader->location_top()
    ok: p_reader->get() == 'c'
    ok: p_reader->get() == 'd'
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )


    File reader tests [c:\home\pete\sw\dsl-pa\test\reader-test.cpp:313]
    ==========================
    File reader basic tests [c:\home\pete\sw\dsl-pa\test\reader-test.cpp:101]
    ==========================
      : std::auto_ptr< reader > p_reader( r_reader_factory.create( "abc d" ) )
    ok: fout.is_open()
    ok: p_reader.get() != 0
    ok: p_reader->get() == 'a'
    ok: p_reader->current() == 'a'
    ok: p_reader->current() == 'a'
    ok: p_reader->get() == 'b'
    ok: p_reader->current() == 'b'
    ok: p_reader->get() == 'c'
    ok: p_reader->get() == ' '
    ok: p_reader->get() == 'd'
    ok: p_reader->get() == reader::R_EOI
    ok: p_reader->current() == reader::R_EOI
      : std::auto_ptr< reader > p_reader_empty( r_reader_factory.create( "" ) )
    ok: fout.is_open()
    ok: p_reader_empty.get() != 0
    ok: p_reader_empty->get() == reader::R_EOI
    ok: p_reader_empty->current() == reader::R_EOI
    File reader location tests [c:\home\pete\sw\dsl-pa\test\reader-test.cpp:128]
    ==========================
      : std::auto_ptr< reader > p_reader( r_reader_factory.create( "abcdef" ) )
    ok: fout.is_open()
    ok: p_reader.get() != 0
    ok: p_reader->get() == 'a'
    ok: p_reader->current() == 'a'
    ok: p_reader->current() == 'a'
    ok: p_reader->get() == 'b'
    ok: p_reader->current() == 'b'
    ok: p_reader->location_push()
    ok: p_reader->get() == 'c'
    ok: p_reader->get() == 'd'
    ok: p_reader->location_push()
    ok: p_reader->get() == 'e'
    ok: p_reader->get() == 'f'
    ok: p_reader->get() == reader::R_EOI
    ok: p_reader->get() == reader::R_EOI
    ok: p_reader->location_top()
    ok: p_reader->get() == 'e'
    ok: p_reader->get() == 'f'
    ok: p_reader->location_top()
    ok: p_reader->get() == 'e'
    ok: p_reader->get() == 'f'
    ok: p_reader->location_pop()
    ok: p_reader->location_top()
    ok: p_reader->get() == 'c'
    ok: p_reader->get() == 'd'
    File reader location with newline tests [c:\home\pete\sw\dsl-pa\test\reader-test.cpp:168]
    ==========================
      : std::auto_ptr< reader > p_reader( r_reader_factory.create( "abc\ndef" ) )
    ok: fout.is_open()
    ok: p_reader.get() != 0
    ok: p_reader->get() == 'a'
    ok: p_reader->get() == 'b'
    ok: p_reader->location_push()
    ok: p_reader->get() == 'c'
    ok: p_reader->get() == '\n'
    ok: p_reader->get() == 'd'
    ok: p_reader->location_push()
    ok: p_reader->get() == 'e'
    ok: p_reader->get() == 'f'
    ok: p_reader->location_top()
    ok: p_reader->get() == 'e'
    ok: p_reader->location_pop()
    ok: p_reader->location_top()
    ok: p_reader->get() == 'c'
      : std::auto_ptr< reader > p_reader( r_reader_factory.create( "abc\r\ndef" ) )
    ok: fout.is_open()
    ok: p_reader.get() != 0
    ok: p_reader->get() == 'a'
    ok: p_reader->get() == 'b'
    ok: p_reader->location_push()
    ok: p_reader->get() == 'c'
    ok: p_reader->get() == '\r'
    ok: p_reader->get() == '\n'
    ok: p_reader->get() == 'd'
    ok: p_reader->location_push()
    ok: p_reader->get() == 'e'
    ok: p_reader->get() == 'f'
    ok: p_reader->location_top()
    ok: p_reader->get() == 'e'
    ok: p_reader->location_pop()
    ok: p_reader->location_top()
    ok: p_reader->get() == 'c'
    File reader unget/peek tests [c:\home\pete\sw\dsl-pa\test\reader-test.cpp:228]
    ==========================
      : std::auto_ptr< reader > p_reader( r_reader_factory.create( "abcdef" ) )
    ok: fout.is_open()
    ok: p_reader.get() != 0
    ok: p_reader->get() == 'a'
    ok: p_reader->get() == 'b'
      : p_reader->unget()
    ok: p_reader->current() == 'b'
    ok: p_reader->get() == 'b'
      : p_reader->unget()
    ok: p_reader->current() == 'b'
    ok: p_reader->get() == 'b'
      : p_reader->unget( 'z' )
      : p_reader->unget( 'y' )
    ok: p_reader->current() == 'b'
    ok: p_reader->get() == 'y'
    ok: p_reader->get() == 'z'
      Test peek()
    ok: p_reader->get() == 'c'
    ok: p_reader->peek() == 'd'
    ok: p_reader->peek() == 'd'
    ok: p_reader->get() == 'd'
    ok: p_reader->peek() == 'e'
    ok: p_reader->get() == 'e'
    File reader location logger tests [c:\home\pete\sw\dsl-pa\test\reader-test.cpp:258]
    ==========================
      : std::auto_ptr< reader > p_reader( r_reader_factory.create( "abcdef" ) )
    ok: fout.is_open()
    ok: p_reader.get() != 0
    ok: p_reader->get() == 'a'
    ok: p_reader->current() == 'a'
    ok: p_reader->current() == 'a'
    ok: p_reader->get() == 'b'
    ok: p_reader->current() == 'b'
    ok: p_reader->location_push()
    ok: p_reader->get() == 'c'
    ok: p_reader->get() == 'd'
      : location_logger my_location_logger( *p_reader )
    ok: p_reader->get() == 'e'
    ok: p_reader->get() == 'f'
    ok: p_reader->get() == reader::R_EOI
    ok: p_reader->get() == reader::R_EOI
    ok: p_reader->location_top()
    ok: p_reader->get() == 'e'
    ok: p_reader->get() == 'f'
    ok: p_reader->location_top()
    ok: p_reader->get() == 'e'
    ok: p_reader->get() == 'f'
    ok: p_reader->location_top()
    ok: p_reader->get() == 'c'
    ok: p_reader->get() == 'd'
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )


    Mem buf reader tests [c:\home\pete\sw\dsl-pa\test\reader-test.cpp:320]
    ==========================
    Mem buf reader basic tests [c:\home\pete\sw\dsl-pa\test\reader-test.cpp:101]
    ==========================
      : std::auto_ptr< reader > p_reader( r_reader_factory.create( "abc d" ) )
    ok: p_reader.get() != 0
    ok: p_reader->get() == 'a'
    ok: p_reader->current() == 'a'
    ok: p_reader->current() == 'a'
    ok: p_reader->get() == 'b'
    ok: p_reader->current() == 'b'
    ok: p_reader->get() == 'c'
    ok: p_reader->get() == ' '
    ok: p_reader->get() == 'd'
    ok: p_reader->get() == reader::R_EOI
    ok: p_reader->current() == reader::R_EOI
      : std::auto_ptr< reader > p_reader_empty( r_reader_factory.create( "" ) )
    ok: p_reader_empty.get() != 0
    ok: p_reader_empty->get() == reader::R_EOI
    ok: p_reader_empty->current() == reader::R_EOI
    Mem buf reader location tests [c:\home\pete\sw\dsl-pa\test\reader-test.cpp:128]
    ==========================
      : std::auto_ptr< reader > p_reader( r_reader_factory.create( "abcdef" ) )
    ok: p_reader.get() != 0
    ok: p_reader->get() == 'a'
    ok: p_reader->current() == 'a'
    ok: p_reader->current() == 'a'
    ok: p_reader->get() == 'b'
    ok: p_reader->current() == 'b'
    ok: p_reader->location_push()
    ok: p_reader->get() == 'c'
    ok: p_reader->get() == 'd'
    ok: p_reader->location_push()
    ok: p_reader->get() == 'e'
    ok: p_reader->get() == 'f'
    ok: p_reader->get() == reader::R_EOI
    ok: p_reader->get() == reader::R_EOI
    ok: p_reader->location_top()
    ok: p_reader->get() == 'e'
    ok: p_reader->get() == 'f'
    ok: p_reader->location_top()
    ok: p_reader->get() == 'e'
    ok: p_reader->get() == 'f'
    ok: p_reader->location_pop()
    ok: p_reader->location_top()
    ok: p_reader->get() == 'c'
    ok: p_reader->get() == 'd'
    Mem buf reader location with newline tests [c:\home\pete\sw\dsl-pa\test\reader-test.cpp:168]
    ==========================
      : std::auto_ptr< reader > p_reader( r_reader_factory.create( "abc\ndef" ) )
    ok: p_reader.get() != 0
    ok: p_reader->get() == 'a'
    ok: p_reader->get() == 'b'
    ok: p_reader->location_push()
    ok: p_reader->get() == 'c'
    ok: p_reader->get() == '\n'
    ok: p_reader->get() == 'd'
    ok: p_reader->location_push()
    ok: p_reader->get() == 'e'
    ok: p_reader->get() == 'f'
    ok: p_reader->location_top()
    ok: p_reader->get() == 'e'
    ok: p_reader->location_pop()
    ok: p_reader->location_top()
    ok: p_reader->get() == 'c'
      : std::auto_ptr< reader > p_reader( r_reader_factory.create( "abc\r\ndef" ) )
    ok: p_reader.get() != 0
    ok: p_reader->get() == 'a'
    ok: p_reader->get() == 'b'
    ok: p_reader->location_push()
    ok: p_reader->get() == 'c'
    ok: p_reader->get() == '\r'
    ok: p_reader->get() == '\n'
    ok: p_reader->get() == 'd'
    ok: p_reader->location_push()
    ok: p_reader->get() == 'e'
    ok: p_reader->get() == 'f'
    ok: p_reader->location_top()
    ok: p_reader->get() == 'e'
    ok: p_reader->location_pop()
    ok: p_reader->location_top()
    ok: p_reader->get() == 'c'
    Mem buf reader unget/peek tests [c:\home\pete\sw\dsl-pa\test\reader-test.cpp:228]
    ==========================
      : std::auto_ptr< reader > p_reader( r_reader_factory.create( "abcdef" ) )
    ok: p_reader.get() != 0
    ok: p_reader->get() == 'a'
    ok: p_reader->get() == 'b'
      : p_reader->unget()
    ok: p_reader->current() == 'b'
    ok: p_reader->get() == 'b'
      : p_reader->unget()
    ok: p_reader->current() == 'b'
    ok: p_reader->get() == 'b'
      : p_reader->unget( 'z' )
      : p_reader->unget( 'y' )
    ok: p_reader->current() == 'b'
    ok: p_reader->get() == 'y'
    ok: p_reader->get() == 'z'
      Test peek()
    ok: p_reader->get() == 'c'
    ok: p_reader->peek() == 'd'
    ok: p_reader->peek() == 'd'
    ok: p_reader->get() == 'd'
    ok: p_reader->peek() == 'e'
    ok: p_reader->get() == 'e'
    Mem buf reader location logger tests [c:\home\pete\sw\dsl-pa\test\reader-test.cpp:258]
    ==========================
      : std::auto_ptr< reader > p_reader( r_reader_factory.create( "abcdef" ) )
    ok: p_reader.get() != 0
    ok: p_reader->get() == 'a'
    ok: p_reader->current() == 'a'
    ok: p_reader->current() == 'a'
    ok: p_reader->get() == 'b'
    ok: p_reader->current() == 'b'
    ok: p_reader->location_push()
    ok: p_reader->get() == 'c'
    ok: p_reader->get() == 'd'
      : location_logger my_location_logger( *p_reader )
    ok: p_reader->get() == 'e'
    ok: p_reader->get() == 'f'
    ok: p_reader->get() == reader::R_EOI
    ok: p_reader->get() == reader::R_EOI
    ok: p_reader->location_top()
    ok: p_reader->get() == 'e'
    ok: p_reader->get() == 'f'
    ok: p_reader->location_top()
    ok: p_reader->get() == 'e'
    ok: p_reader->get() == 'f'
    ok: p_reader->location_top()
    ok: p_reader->get() == 'c'
    ok: p_reader->get() == 'd'
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )


    Is char reader tests [c:\home\pete\sw\dsl-pa\test\reader-test.cpp:327]
    ==========================
    ok: ! my_reader.is_char( 'x' )
    ok: my_reader.is_char( 'a' )
    ok: ! my_reader.is_char( 'x' )
    ok: my_reader.is_char( 'b' )
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )


    Reader line counting tests [c:\home\pete\sw\dsl-pa\test\reader-test.cpp:339]
    ==========================
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )
    ok: _CrtCheckMemory() != 0

TODOs (1):
------------------------
- Add line counting functionality to reader class [c:\home\pete\sw\dsl-pa\test\reader-test.cpp:341]

0 error(s), 1 todo(s), 455 test(s)
