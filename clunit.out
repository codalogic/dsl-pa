Tests run on Fri May 25 21:26:42 2012


    Alphabet tests [c:\home\pete\sw\dsl-pa\test\alphabet-test.cpp:42]
    ==========================
      Word char alphabet
    ok: my_alphabet.is_wanted( 'b' )
    ok: ! my_alphabet.is_wanted( '$' )
    ok: ! my_alphabet.is_wanted( ' ' )
      Check word char alphabet polymorphism!
    ok: p_my_alphabet->is_wanted( 'b' )
    ok: ! p_my_alphabet->is_wanted( '$' )
    ok: ! p_my_alphabet->is_wanted( ' ' )
      Whitespace alphabet
    ok: my_ws_alphabet.is_wanted( ' ' )
    ok: my_ws_alphabet.is_wanted( '\t' )
    ok: ! my_ws_alphabet.is_wanted( 'A' )
      Digit alphabet
    ok: my_digit_alphabet.is_wanted( '0' )
    ok: my_digit_alphabet.is_wanted( '5' )
    ok: my_digit_alphabet.is_wanted( '9' )
    ok: ! my_digit_alphabet.is_wanted( 'a' )
      Hex alphabet
    ok: my_hex_alphabet.is_wanted( '0' )
    ok: my_hex_alphabet.is_wanted( '5' )
    ok: my_hex_alphabet.is_wanted( '9' )
    ok: my_hex_alphabet.is_wanted( 'A' )
    ok: my_hex_alphabet.is_wanted( 'C' )
    ok: my_hex_alphabet.is_wanted( 'F' )
    ok: my_hex_alphabet.is_wanted( 'a' )
    ok: my_hex_alphabet.is_wanted( 'c' )
    ok: my_hex_alphabet.is_wanted( 'f' )
    ok: ! my_hex_alphabet.is_wanted( 'G' )
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )


    Alphabet combiners tests [c:\home\pete\sw\dsl-pa\test\alphabet-test.cpp:88]
    ==========================
    ok: alphabet_digit().is_wanted( '1' )
    ok: alphabet_not( alphabet_digit() ).is_wanted( 'x' )
    ok: alphabet_or( alphabet_ws(), alphabet_digit() ).is_wanted( '5' )
    ok: alphabet_or( alphabet_ws(), alphabet_digit() ).is_wanted( ' ' )
    ok: ! alphabet_or( alphabet_ws(), alphabet_digit() ).is_wanted( 'x' )
    ok: alphabet_not( alphabet_or( alphabet_ws(), alphabet_digit() ) ).is_wanted( 'x' )
    ok: alphabet_or( alphabet_ws(), alphabet_or( alphabet_digit(), alphabet_uni() ) ).is_wanted( ' ' )
    ok: alphabet_or( alphabet_ws(), alphabet_or( alphabet_digit(), alphabet_uni() ) ).is_wanted( '5' )
    ok: alphabet_or( alphabet_ws(), alphabet_or( alphabet_digit(), alphabet_uni() ) ).is_wanted( '\x80' )
    ok: ! alphabet_or( alphabet_ws(), alphabet_or( alphabet_digit(), alphabet_uni() ) ).is_wanted( '$' )
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )


    dsl_pa::set() operation [c:\home\pete\sw\dsl-pa\test\dsl-pa-test.cpp:44]
    ==========================
      : int i = 0
      : dsl_pa::set( i, 1 )
    ok: i == 1
      : dsl_pa::set( e, COLD )
    ok: e == COLD
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )


    dsl pa class tests [c:\home\pete\sw\dsl-pa\test\dsl-pa-test.cpp:57]
    ==========================
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )


    String reader tests [c:\home\pete\sw\dsl-pa\test\reader-test.cpp:293]
    ==========================
    String reader basic tests [c:\home\pete\sw\dsl-pa\test\reader-test.cpp:88]
    ==========================
      : std::auto_ptr< reader > p_reader( r_reader_factory.create( "abc d" ) )
    ok: p_reader.get() != 0
    ok: p_reader->get() == 'a'
    ok: p_reader->current() == 'a'
    ok: p_reader->current() == 'a'
    ok: p_reader->get() == 'b'
    ok: p_reader->current() == 'b'
    ok: p_reader->get() == 'c'
    ok: p_reader->get() == ' '
    ok: p_reader->get() == 'd'
    ok: p_reader->get() == reader::R_EOI
    ok: p_reader->current() == reader::R_EOI
      : std::auto_ptr< reader > p_reader_empty( r_reader_factory.create( "" ) )
    ok: p_reader_empty.get() != 0
    ok: p_reader_empty->get() == reader::R_EOI
    ok: p_reader_empty->current() == reader::R_EOI
    String reader location tests [c:\home\pete\sw\dsl-pa\test\reader-test.cpp:115]
    ==========================
      : std::auto_ptr< reader > p_reader( r_reader_factory.create( "abcdef" ) )
    ok: p_reader.get() != 0
    ok: p_reader->get() == 'a'
    ok: p_reader->current() == 'a'
    ok: p_reader->current() == 'a'
    ok: p_reader->get() == 'b'
    ok: p_reader->current() == 'b'
    ok: p_reader->location_push()
    ok: p_reader->get() == 'c'
    ok: p_reader->get() == 'd'
    ok: p_reader->location_push()
    ok: p_reader->get() == 'e'
    ok: p_reader->get() == 'f'
    ok: p_reader->get() == reader::R_EOI
    ok: p_reader->get() == reader::R_EOI
    ok: p_reader->location_top()
    ok: p_reader->get() == 'e'
    ok: p_reader->get() == 'f'
    ok: p_reader->location_top()
    ok: p_reader->get() == 'e'
    ok: p_reader->get() == 'f'
    ok: p_reader->location_pop()
    ok: p_reader->location_top()
    ok: p_reader->get() == 'c'
    ok: p_reader->get() == 'd'
    String reader location with newline tests [c:\home\pete\sw\dsl-pa\test\reader-test.cpp:155]
    ==========================
      : std::auto_ptr< reader > p_reader( r_reader_factory.create( "abc\ndef" ) )
    ok: p_reader.get() != 0
    ok: p_reader->get() == 'a'
    ok: p_reader->get() == 'b'
    ok: p_reader->location_push()
    ok: p_reader->get() == 'c'
    ok: p_reader->get() == '\n'
    ok: p_reader->get() == 'd'
    ok: p_reader->location_push()
    ok: p_reader->get() == 'e'
    ok: p_reader->get() == 'f'
    ok: p_reader->location_top()
    ok: p_reader->get() == 'e'
    ok: p_reader->location_pop()
    ok: p_reader->location_top()
    ok: p_reader->get() == 'c'
      : std::auto_ptr< reader > p_reader( r_reader_factory.create( "abc\r\ndef" ) )
    ok: p_reader.get() != 0
    ok: p_reader->get() == 'a'
    ok: p_reader->get() == 'b'
    ok: p_reader->location_push()
    ok: p_reader->get() == 'c'
    ok: p_reader->get() == '\r'
    ok: p_reader->get() == '\n'
    ok: p_reader->get() == 'd'
    ok: p_reader->location_push()
    ok: p_reader->get() == 'e'
    ok: p_reader->get() == 'f'
    ok: p_reader->location_top()
    ok: p_reader->get() == 'e'
    ok: p_reader->location_pop()
    ok: p_reader->location_top()
    ok: p_reader->get() == 'c'
    String reader unget/peek tests [c:\home\pete\sw\dsl-pa\test\reader-test.cpp:215]
    ==========================
      : std::auto_ptr< reader > p_reader( r_reader_factory.create( "abcdef" ) )
    ok: p_reader.get() != 0
    ok: p_reader->get() == 'a'
    ok: p_reader->get() == 'b'
      : p_reader->unget()
    ok: p_reader->current() == 'b'
    ok: p_reader->get() == 'b'
      : p_reader->unget()
    ok: p_reader->current() == 'b'
    ok: p_reader->get() == 'b'
      : p_reader->unget( 'z' )
      : p_reader->unget( 'y' )
    ok: p_reader->current() == 'b'
    ok: p_reader->get() == 'y'
    ok: p_reader->get() == 'z'
      Test peek()
    ok: p_reader->get() == 'c'
    ok: p_reader->peek() == 'd'
    ok: p_reader->peek() == 'd'
    ok: p_reader->get() == 'd'
    ok: p_reader->peek() == 'e'
    ok: p_reader->get() == 'e'
    String reader location logger tests [c:\home\pete\sw\dsl-pa\test\reader-test.cpp:245]
    ==========================
      : std::auto_ptr< reader > p_reader( r_reader_factory.create( "abcdef" ) )
    ok: p_reader.get() != 0
    ok: p_reader->get() == 'a'
    ok: p_reader->current() == 'a'
    ok: p_reader->current() == 'a'
    ok: p_reader->get() == 'b'
    ok: p_reader->current() == 'b'
    ok: p_reader->location_push()
    ok: p_reader->get() == 'c'
    ok: p_reader->get() == 'd'
      : location_logger my_location_logger( *p_reader )
    ok: p_reader->get() == 'e'
    ok: p_reader->get() == 'f'
    ok: p_reader->get() == reader::R_EOI
    ok: p_reader->get() == reader::R_EOI
    ok: p_reader->location_top()
    ok: p_reader->get() == 'e'
    ok: p_reader->get() == 'f'
    ok: p_reader->location_top()
    ok: p_reader->get() == 'e'
    ok: p_reader->get() == 'f'
    ok: p_reader->location_top()
    ok: p_reader->get() == 'c'
    ok: p_reader->get() == 'd'
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )


    File reader tests [c:\home\pete\sw\dsl-pa\test\reader-test.cpp:300]
    ==========================
    File reader basic tests [c:\home\pete\sw\dsl-pa\test\reader-test.cpp:88]
    ==========================
      : std::auto_ptr< reader > p_reader( r_reader_factory.create( "abc d" ) )
    ok: fout.is_open()
    ok: p_reader.get() != 0
    ok: p_reader->get() == 'a'
    ok: p_reader->current() == 'a'
    ok: p_reader->current() == 'a'
    ok: p_reader->get() == 'b'
    ok: p_reader->current() == 'b'
    ok: p_reader->get() == 'c'
    ok: p_reader->get() == ' '
    ok: p_reader->get() == 'd'
    ok: p_reader->get() == reader::R_EOI
    ok: p_reader->current() == reader::R_EOI
      : std::auto_ptr< reader > p_reader_empty( r_reader_factory.create( "" ) )
    ok: fout.is_open()
    ok: p_reader_empty.get() != 0
    ok: p_reader_empty->get() == reader::R_EOI
    ok: p_reader_empty->current() == reader::R_EOI
    File reader location tests [c:\home\pete\sw\dsl-pa\test\reader-test.cpp:115]
    ==========================
      : std::auto_ptr< reader > p_reader( r_reader_factory.create( "abcdef" ) )
    ok: fout.is_open()
    ok: p_reader.get() != 0
    ok: p_reader->get() == 'a'
    ok: p_reader->current() == 'a'
    ok: p_reader->current() == 'a'
    ok: p_reader->get() == 'b'
    ok: p_reader->current() == 'b'
    ok: p_reader->location_push()
    ok: p_reader->get() == 'c'
    ok: p_reader->get() == 'd'
    ok: p_reader->location_push()
    ok: p_reader->get() == 'e'
    ok: p_reader->get() == 'f'
    ok: p_reader->get() == reader::R_EOI
    ok: p_reader->get() == reader::R_EOI
    ok: p_reader->location_top()
    ok: p_reader->get() == 'e'
    ok: p_reader->get() == 'f'
    ok: p_reader->location_top()
    ok: p_reader->get() == 'e'
    ok: p_reader->get() == 'f'
    ok: p_reader->location_pop()
    ok: p_reader->location_top()
    ok: p_reader->get() == 'c'
    ok: p_reader->get() == 'd'
    File reader location with newline tests [c:\home\pete\sw\dsl-pa\test\reader-test.cpp:155]
    ==========================
      : std::auto_ptr< reader > p_reader( r_reader_factory.create( "abc\ndef" ) )
    ok: fout.is_open()
    ok: p_reader.get() != 0
    ok: p_reader->get() == 'a'
    ok: p_reader->get() == 'b'
    ok: p_reader->location_push()
    ok: p_reader->get() == 'c'
    ok: p_reader->get() == '\n'
    ok: p_reader->get() == 'd'
    ok: p_reader->location_push()
    ok: p_reader->get() == 'e'
    ok: p_reader->get() == 'f'
    ok: p_reader->location_top()
    ok: p_reader->get() == 'e'
    ok: p_reader->location_pop()
    ok: p_reader->location_top()
    ok: p_reader->get() == 'c'
      : std::auto_ptr< reader > p_reader( r_reader_factory.create( "abc\r\ndef" ) )
    ok: fout.is_open()
    ok: p_reader.get() != 0
    ok: p_reader->get() == 'a'
    ok: p_reader->get() == 'b'
    ok: p_reader->location_push()
    ok: p_reader->get() == 'c'
    ok: p_reader->get() == '\r'
    ok: p_reader->get() == '\n'
    ok: p_reader->get() == 'd'
    ok: p_reader->location_push()
    ok: p_reader->get() == 'e'
    ok: p_reader->get() == 'f'
    ok: p_reader->location_top()
    ok: p_reader->get() == 'e'
    ok: p_reader->location_pop()
    ok: p_reader->location_top()
    ok: p_reader->get() == 'c'
    File reader unget/peek tests [c:\home\pete\sw\dsl-pa\test\reader-test.cpp:215]
    ==========================
      : std::auto_ptr< reader > p_reader( r_reader_factory.create( "abcdef" ) )
    ok: fout.is_open()
    ok: p_reader.get() != 0
    ok: p_reader->get() == 'a'
    ok: p_reader->get() == 'b'
      : p_reader->unget()
    ok: p_reader->current() == 'b'
    ok: p_reader->get() == 'b'
      : p_reader->unget()
    ok: p_reader->current() == 'b'
    ok: p_reader->get() == 'b'
      : p_reader->unget( 'z' )
      : p_reader->unget( 'y' )
    ok: p_reader->current() == 'b'
    ok: p_reader->get() == 'y'
    ok: p_reader->get() == 'z'
      Test peek()
    ok: p_reader->get() == 'c'
    ok: p_reader->peek() == 'd'
    ok: p_reader->peek() == 'd'
    ok: p_reader->get() == 'd'
    ok: p_reader->peek() == 'e'
    ok: p_reader->get() == 'e'
    File reader location logger tests [c:\home\pete\sw\dsl-pa\test\reader-test.cpp:245]
    ==========================
      : std::auto_ptr< reader > p_reader( r_reader_factory.create( "abcdef" ) )
    ok: fout.is_open()
    ok: p_reader.get() != 0
    ok: p_reader->get() == 'a'
    ok: p_reader->current() == 'a'
    ok: p_reader->current() == 'a'
    ok: p_reader->get() == 'b'
    ok: p_reader->current() == 'b'
    ok: p_reader->location_push()
    ok: p_reader->get() == 'c'
    ok: p_reader->get() == 'd'
      : location_logger my_location_logger( *p_reader )
    ok: p_reader->get() == 'e'
    ok: p_reader->get() == 'f'
    ok: p_reader->get() == reader::R_EOI
    ok: p_reader->get() == reader::R_EOI
    ok: p_reader->location_top()
    ok: p_reader->get() == 'e'
    ok: p_reader->get() == 'f'
    ok: p_reader->location_top()
    ok: p_reader->get() == 'e'
    ok: p_reader->get() == 'f'
    ok: p_reader->location_top()
    ok: p_reader->get() == 'c'
    ok: p_reader->get() == 'd'
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )
    ok: _CrtCheckMemory() != 0
0 error(s), 0 todo(s), 263 test(s)
