Tests run on Tue Jul 14 17:17:32 2015


    Alphabet tests [c:\home\pete\sw\dsl-pa\test\alphabet-test.cpp:42]
    ==========================
      Word char alphabet
    ok: my_alphabet.is_sought( 'b' )
    ok: ! my_alphabet.is_sought( '$' )
    ok: ! my_alphabet.is_sought( ' ' )
      Check word char alphabet polymorphism!
    ok: p_my_alphabet->is_sought( 'b' )
    ok: ! p_my_alphabet->is_sought( '$' )
    ok: ! p_my_alphabet->is_sought( ' ' )
      Whitespace alphabet
    ok: my_space_alphabet.is_sought( ' ' )
    ok: my_space_alphabet.is_sought( '\t' )
    ok: ! my_space_alphabet.is_sought( 'A' )
      Digit alphabet
    ok: my_digit_alphabet.is_sought( '0' )
    ok: my_digit_alphabet.is_sought( '5' )
    ok: my_digit_alphabet.is_sought( '9' )
    ok: ! my_digit_alphabet.is_sought( 'a' )
      Hex alphabet
    ok: my_hex_alphabet.is_sought( '0' )
    ok: my_hex_alphabet.is_sought( '5' )
    ok: my_hex_alphabet.is_sought( '9' )
    ok: my_hex_alphabet.is_sought( 'A' )
    ok: my_hex_alphabet.is_sought( 'C' )
    ok: my_hex_alphabet.is_sought( 'F' )
    ok: my_hex_alphabet.is_sought( 'a' )
    ok: my_hex_alphabet.is_sought( 'c' )
    ok: my_hex_alphabet.is_sought( 'f' )
    ok: ! my_hex_alphabet.is_sought( 'G' )
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )


    Alphabet combiners tests [c:\home\pete\sw\dsl-pa\test\alphabet-test.cpp:88]
    ==========================
    ok: alphabet_digit().is_sought( '1' )
    ok: alphabet_not( alphabet_digit() ).is_sought( 'x' )
    ok: alphabet_or( alphabet_space(), alphabet_digit() ).is_sought( '5' )
    ok: alphabet_or( alphabet_space(), alphabet_digit() ).is_sought( ' ' )
    ok: ! alphabet_or( alphabet_space(), alphabet_digit() ).is_sought( 'x' )
    ok: alphabet_not( alphabet_or( alphabet_space(), alphabet_digit() ) ).is_sought( 'x' )
    ok: alphabet_or( alphabet_space(), alphabet_or( alphabet_digit(), alphabet_uni() ) ).is_sought( ' ' )
    ok: alphabet_or( alphabet_space(), alphabet_or( alphabet_digit(), alphabet_uni() ) ).is_sought( '5' )
    ok: alphabet_or( alphabet_space(), alphabet_or( alphabet_digit(), alphabet_uni() ) ).is_sought( '\x80' )
    ok: ! alphabet_or( alphabet_space(), alphabet_or( alphabet_digit(), alphabet_uni() ) ).is_sought( '$' )
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )


    Alphabet typedefed tests [c:\home\pete\sw\dsl-pa\test\alphabet-test.cpp:106]
    ==========================
    ok: number().is_sought( '1' )
    ok: name().is_sought( 'g' )
    ok: ! name().is_sought( '1' )
    ok: invert( number() ).is_sought( 'x' )
    ok: either( name(), number() ).is_sought( '5' )
    ok: either( name(), number() ).is_sought( 'j' )
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )


    Alphabet short_alphabets tests [c:\home\pete\sw\dsl-pa\test\alphabet-test.cpp:128]
    ==========================
    ok: digit().is_sought( '1' )
    ok: not( digit() ).is_sought( 'x' )
    ok: or( space(), digit() ).is_sought( '5' )
    ok: alpha().is_sought( 'a' )
    ok: line_space().is_sought( ' ' )
    ok: line_space().is_sought( '\t' )
    ok: ! line_space().is_sought( 'x' )
    ok: end_of_line().is_sought( '\r' )
    ok: end_of_line().is_sought( '\n' )
    ok: ! end_of_line().is_sought( 'x' )
    ok: sign().is_sought( '+' )
    ok: sign().is_sought( '-' )
    ok: ! sign().is_sought( 'x' )
    ok: point().is_sought( '.' )
    ok: ! point().is_sought( 'x' )
    ok: dot().is_sought( '.' )
    ok: ! dot().is_sought( 'x' )
    ok: exponent().is_sought( 'e' )
    ok: exponent().is_sought( 'E' )
    ok: ! exponent().is_sought( 'x' )
    ok: dash().is_sought( '-' )
    ok: ! dash().is_sought( 'x' )
    ok: colon().is_sought( ':' )
    ok: ! colon().is_sought( 'x' )
    ok: semicolon().is_sought( ';' )
    ok: ! semicolon().is_sought( 'x' )
    ok: comma().is_sought( ',' )
    ok: ! comma().is_sought( 'x' )
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )


    Alphabet char_to_size_t tests [c:\home\pete\sw\dsl-pa\test\alphabet-test.cpp:170]
    ==========================
    ok: alphabet_helpers::char_to_size_t( 0 ) == 0
    ok: alphabet_helpers::char_to_size_t( 10 ) == 10
    ok: alphabet_helpers::char_to_size_t( -2 ) == 254
    ok: char_to_size_t( 30 ) == 30
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )


     Alphabet char_map tests [c:\home\pete\sw\dsl-pa\test\alphabet-test.cpp:183]
    ==========================
    ok: ! my_map.is_set( 'a' )
    ok: ! my_map.is_set( 'b' )
    ok: ! my_map.is_set( 'c' )
    ok: ! my_map.is_set( 'd' )
    ok: ! my_map.is_set( 'e' )
    ok: ! my_map.is_set( 'f' )
    ok: ! my_map.is_set( 'a' )
    ok: my_map.is_set( 'b' )
    ok: my_map.is_set( 'c' )
    ok: my_map.is_set( 'd' )
    ok: my_map.is_set( 'e' )
    ok: ! my_map.is_set( 'f' )
    ok: ! my_map.is_set( 'a' )
    ok: my_map.is_set( 'b' )
    ok: my_map.is_set( 'c' )
    ok: my_map.is_set( 'd' )
    ok: my_map.is_set( 'e' )
    ok: ! my_map.is_set( 'f' )
    ok: my_map.is_set( 'g' )
    ok: my_map.is_set( 'h' )
    ok: my_map.is_set( 'i' )
    ok: my_map.is_set( 'j' )
    ok: ! my_map.is_set( 'k' )
    ok: my_map.is_set( 'a' )
    ok: my_map.is_set( 'b' )
    ok: my_map.is_set( 'c' )
    ok: my_map.is_set( 'd' )
    ok: my_map.is_set( 'e' )
    ok: my_map.is_set( 'f' )
    ok: my_map.is_set( 'g' )
    ok: my_map.is_set( 'h' )
    ok: my_map.is_set( 'i' )
    ok: my_map.is_set( 'j' )
    ok: my_map.is_set( 'k' )
    ok: ! my_map.is_set( 'w' )
    ok: ! my_map.is_set( 'x' )
    ok: ! my_map.is_set( 'y' )
    ok: ! my_map.is_set( 'z' )
    ok: ! my_map.is_set( 'x' )
    ok: my_map.is_set( 'x' )
    ok: ! my_map.is_set( 'a' )
    ok: ! my_map.is_set( 'b' )
    ok: ! my_map.is_set( 'c' )
    ok: ! my_map.is_set( 'd' )
    ok: ! my_map.is_set( 'e' )
    ok: ! my_map.is_set( 'f' )
    ok: ! my_map.is_set( 'g' )
    ok: ! my_map.is_set( 'h' )
    ok: ! my_map.is_set( 'i' )
    ok: ! my_map.is_set( 'j' )
    ok: ! my_map.is_set( 'k' )
    ok: my_map.is_set( 'w' )
    ok: ! my_map.is_set( 'x' )
    ok: my_map.is_set( 'y' )
    ok: my_map.is_set( 'z' )
    ok: ! my_map.is_set( 'a' )
    ok: my_map.is_set( 'b' )
    ok: my_map.is_set( 'c' )
    ok: my_map.is_set( 'd' )
    ok: my_map.is_set( 'e' )
    ok: ! my_map.is_set( 'f' )
    ok: ! my_map.is_set( 'a' )
    ok: ! my_map.is_set( 'b' )
    ok: ! my_map.is_set( 'c' )
    ok: ! my_map.is_set( 'd' )
    ok: ! my_map.is_set( 'e' )
    ok: ! my_map.is_set( 'f' )
    ok: ! my_map.is_set( 'g' )
    ok: ! my_map.is_set( 'h' )
      Test chained operations
    ok: my_map.is_set( 'a' )
    ok: ! my_map.is_set( 'b' )
    ok: my_map.is_set( 'e' )
    ok: ! my_map.is_set( 'f' )
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )


     Alphabet_char_class tests [c:\home\pete\sw\dsl-pa\test\alphabet-test.cpp:292]
    ==========================
      : alphabet_char_class my_char_class( "a-z" )
    ok: my_char_class.is_sought( 'a' )
    ok: ! my_char_class.is_sought( '$' )
      : alphabet_char_class my_char_class( "a-dm-oxyz" )
    ok: my_char_class.is_sought( 'a' )
    ok: my_char_class.is_sought( 'd' )
    ok: ! my_char_class.is_sought( 'e' )
    ok: ! my_char_class.is_sought( 'l' )
    ok: my_char_class.is_sought( 'm' )
    ok: my_char_class.is_sought( 'o' )
    ok: ! my_char_class.is_sought( 'p' )
    ok: my_char_class.is_sought( 'x' )
    ok: my_char_class.is_sought( 'y' )
    ok: my_char_class.is_sought( 'z' )
      : alphabet_char_class my_char_class( "^a-dm-oxyz" )
    ok: ! my_char_class.is_sought( 'a' )
    ok: ! my_char_class.is_sought( 'd' )
    ok: my_char_class.is_sought( 'e' )
    ok: my_char_class.is_sought( 'l' )
    ok: ! my_char_class.is_sought( 'm' )
    ok: ! my_char_class.is_sought( 'o' )
    ok: my_char_class.is_sought( 'p' )
    ok: ! my_char_class.is_sought( 'x' )
    ok: ! my_char_class.is_sought( 'y' )
    ok: ! my_char_class.is_sought( 'z' )
      : alphabet_char_class my_char_class( "\\da-f" )
    ok: my_char_class.is_sought( 'a' )
    ok: my_char_class.is_sought( 'd' )
    ok: my_char_class.is_sought( '2' )
    ok: ! my_char_class.is_sought( 'l' )
      : alphabet_char_class my_char_class( "~d" )
    ok: my_char_class.is_sought( '2' )
    ok: ! my_char_class.is_sought( 'l' )
      : alphabet_char_class my_char_class( "~D" )
    ok: ! my_char_class.is_sought( '2' )
    ok: my_char_class.is_sought( 'l' )
      : alphabet_char_class my_char_class( "~w" )
    ok: my_char_class.is_sought( '2' )
    ok: ! my_char_class.is_sought( '$' )
    ok: ! my_char_class.is_sought( '\0' )
      : alphabet_char_class my_char_class( "~W" )
    ok: ! my_char_class.is_sought( '2' )
    ok: my_char_class.is_sought( '$' )
    ok: ! my_char_class.is_sought( '\0' )
      : alphabet_char_class my_char_class( "~s" )
    ok: my_char_class.is_sought( ' ' )
    ok: ! my_char_class.is_sought( '$' )
      : alphabet_char_class my_char_class( "~S" )
    ok: ! my_char_class.is_sought( ' ' )
    ok: my_char_class.is_sought( '$' )
    ok: ! my_char_class.is_sought( '\0' )
      : alphabet_char_class my_char_class( "~d~w" )
    ok: my_char_class.is_sought( '2' )
    ok: my_char_class.is_sought( 'l' )
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )


    ok: pal.result() == true
    ok: dsl_pa_lite( "" ).result() == true
    ok: pal.result() == true
    ok: pal.is_char( 's' ).result() == true
    ok: dsl_pa_lite( "s" ).is_char( 's' ).is_end().result() == true
    ok: dsl_pa_lite( "s" ).is_char( 's' ).is_end() == true
    ok: dsl_pa_lite( "s" ).is_char( 's' ).not().is_end().result() == false
    ok: dsl_pa_lite( "s" ).is_char( 's' ).not().is_end() == false
    ok: dsl_pa_lite( "se" ).is_char( 's' ).not().is_end().result() == true
    ok: dsl_pa_lite( "se" ).is_char( 's' ).not().is_end() == true
    ok: dsl_pa_lite( "se" ).is_char( 's' ).is_end().result() == false
    ok: dsl_pa_lite( "se" ).is_char( 's' ).is_end() == false
    ok: dsl_pa_lite( "se" ).optional().is_char( 'v' ).is_char( 's' ).is_end() == false
    ok: dsl_pa_lite( "se" ).get_int( &i ) == false
    ok: dsl_pa_lite( "se" ).optional().get_int( &i ) == true
    ok: dsl_pa_lite( "se" ).optional().get_int( &i ).is_char( 's' ) == true
    ok: dsl_pa_lite( "s123" ).is_char( 's' ).get_int( &i ).min_size( 2 ) == true
    ok: i == 123
    ok: dsl_pa_lite( "s123" ).is_char( 's' ).get_int( &i ).min_size( 3 ) == true
    ok: dsl_pa_lite( "s123" ).is_char( 's' ).get_int( &i ).min_size( 4 ) == false
    ok: dsl_pa_lite( "s123" ).is_char( 's' ).get_int( &i ).max_size( 4 ) == true
    ok: dsl_pa_lite( "s123" ).is_char( 's' ).get_int( &i ).max_size( 3 ) == true
    ok: dsl_pa_lite( "s123" ).is_char( 's' ).get_int( &i ).max_size( 2 ) == false
    ok: i == 123
    ok: dsl_pa_lite( "s123" ).is_char( 's' ).get_int( &i ).size( 2, 4 ) == true
    ok: dsl_pa_lite( "s123" ).is_char( 's' ).get_int( &i ).size( 3, 4 ) == true
    ok: dsl_pa_lite( "s123" ).is_char( 's' ).get_int( &i ).size( 4, 4 ) == false
    ok: dsl_pa_lite( "s123" ).is_char( 's' ).get_int( &i ).size( 2, 3 ) == true
    ok: dsl_pa_lite( "s123" ).is_char( 's' ).get_int( &i ).size( 2, 2 ) == false
    ok: dsl_pa_lite( "s1.5v" ).is_char( 's' ).get_float( &f ).is_char( 'v' ) == true
    ok: f == 1.5
    ok: dsl_pa_lite( "s123" ).fixed( "s12" ).is_char( '3' ) == true
    ok: dsl_pa_lite( "s123" ).ifixed( "S12" ).is_char( '3' ) == true
    ok: dsl_pa_lite( "foo : 123;" ).get( &name, alphabet_alpha() ). opt_space().is_char( ':' ).opt_space().get_int( &i ).is_char( ';' ) == true
    ok: name == "foo"
    ok: i == 123
    ok: dsl_pa_lite( "foo: 123;" ).get( &name, alphabet_alpha() ). opt_space().is_char( ':' ).opt_space().get_int( &i ).is_char( ';' ) == true
    ok: name == "foo"
    ok: i == 123
    ok: dsl_pa_lite( "foo :123;" ).get( &name, alphabet_alpha() ). opt_space().is_char( ':' ).opt_space().get_int( &i ).is_char( ';' ) == true
    ok: name == "foo"
    ok: i == 123
    ok: dsl_pa_lite( "foo 123;" ).get( &name, alphabet_not( alphabet_space() ) ). space().get_int( &i ).is_char( ';' ) == true
    ok: name == "foo"
    ok: i == 123
    ok: dsl_pa_lite( "foo:123;" ).get( &name, alphabet_alpha() ). opt_space().is_char( ':' ).opt_space().get_int( &i ).is_char( ';' ) == true
    ok: name == "foo"
    ok: i == 123
    ok: dsl_pa_lite( "foo:123;" ).skip( alphabet_alpha() ). opt_space().is_char( ':' ).opt_space().get_int( &i ).is_char( ';' ) == true
    ok: i == 123
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )


    ok: dsl_pa_lite( "foo : 123;" ).get( &name, alphabet_alpha() ). x( colon() ).get_int( &i ).is_char( ';' ) == true
    ok: name == "foo"
    ok: i == 123
    ok: dsl_pa_lite( "foo : 123;" ).get( &name, alphabet_alpha() ) [colon()].get_int( &i ).is_char( ';' ) == true
    ok: name == "foo"
    ok: i == 123
    ok: dsl_pa_lite( "foo - 123;" ).get( &name, alphabet_alpha() ). x( colon() ).get_int( &i ).is_char( ';' ) == false
    ok: dsl_pa_lite( "date: 2012-02-09" ).fixed( "date" ).x( colon() ). x( my_date ) == true
    ok: my_date.get_year() == 2012
    ok: my_date.get_month() == 2
    ok: my_date.get_dom() == 9
    ok: dsl_pa_lite( "date: 2012-02-09" ).fixed( "date" )[colon()] [my_date] == true
    ok: my_date.get_year() == 2012
    ok: my_date.get_month() == 2
    ok: my_date.get_dom() == 9
    ok: dsl_pa_lite( "date: 2012+02+09" ).fixed( "date" ).x( colon() ). x( my_date ) == false
    ok: dsl_pa_lite( input ).get( &name, alphabet_alpha() ). x( colon() ). x( dash() ). get_int( &i ).is_char( ';' )
    ok: name == "foo"
    ok: i == 123
    ok: dsl_pa_lite( "date: 2012-02-09" )["date"][colon()] [my_date] == true
    ok: my_date.get_year() == 2012
    ok: my_date.get_month() == 2
    ok: my_date.get_dom() == 9
    ok: dsl_pa_lite( "date:   2012-02-09" ) ["date"][""][':'][" "][&year]['-'][&month]['-'][&dom] == true
    ok: year == 2012
    ok: month == 2
    ok: dom == "09"
    ok: dsl_pa_lite( "date :   2012-02-09" ) ["date"][""][':'][" "][&year]['-'][&month]['-'][&dom] == true
    ok: dsl_pa_lite( "date :   2012-02-09" ) ["date"][colon()][&year]['-'][&month]['-'][&dom] == true
    ok: dsl_pa_lite( "date :   2012+02+09" ) ["date"][colon()][&year]['-'][&month]['-'][&dom] == false
    ok: dsl_pa_lite( "date :   2012-02-09" ) ["date"][colon()][&year][4][-4]['-'][&month][2][-2]['-'][&dom][2][-2] == true
    ok: dsl_pa_lite( "date :   12-02-09" ) ["date"][colon()][&year][4][-4]['-'][&month][2][-2]['-'][&dom][2][-2] == false
    ok: dsl_pa_lite( "abc123def" ) [alphabet_alpha()][&alpha1][alphabet_digit()][&digit][alphabet_alpha()][&alpha2] == true
    ok: alpha1 == "abc"
    ok: digit == "123"
    ok: alpha2 == "def"
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )


    dsl_pa::optional() operation [c:\home\pete\sw\dsl-pa\test\dsl-pa-test.cpp:69]
    ==========================
    ok: dsl_pa::optional( is_false_optional_test_helper() )
    ok: dsl_pa::optional( is_true_optional_test_helper() )
    ok: dsl_pa::optional( size_0_optional_test_helper() )
    ok: dsl_pa::optional( size_12_optional_test_helper() )
    ok: dsl_pa::optional( int_minus_2_optional_test_helper() )
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )


    dsl_pa::set() operation [c:\home\pete\sw\dsl-pa\test\dsl-pa-test.cpp:80]
    ==========================
      : int i = 0
      : dsl_pa::set( i, 1 )
    ok: i == 1
      : dsl_pa::set( e, COLD )
    ok: e == COLD
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )


    dsl_pa::record() operation [c:\home\pete\sw\dsl-pa\test\dsl-pa-test.cpp:93]
    ==========================
      : bool t1 = false
      : dsl_pa::record( t1, true )
    ok: t1 == true
      : bool t2 = true
      : dsl_pa::record( t2, false )
    ok: t2 == false
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )


    dsl_pa::clear() operation [c:\home\pete\sw\dsl-pa\test\dsl-pa-test.cpp:106]
    ==========================
    ok: ! v.empty()
    ok: dsl_pa::clear( v )
    ok: v.empty()
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )


    dsl_pa::append() operation [c:\home\pete\sw\dsl-pa\test\dsl-pa-test.cpp:116]
    ==========================
    ok: ! v.empty()
    ok: dsl_pa::append( v, "def" )
    ok: v == "abcdef"
    ok: dsl_pa::append( v, 'g' )
    ok: v == "abcdefg"
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )


    dsl_pa::append_current() operation [c:\home\pete\sw\dsl-pa\test\dsl-pa-test.cpp:128]
    ==========================
    ok: my_dsl_pa.get() == 'a'
    ok: my_dsl_pa.append_current( v )
    ok: v == "abca"
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )


    dsl_pa::error() operation [c:\home\pete\sw\dsl-pa\test\dsl-pa-test.cpp:142]
    ==========================
    ok: is_thrown
    ok: is_thrown
    ok: r_exception.get_code() == 12
    ok: is_thrown
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )


    dsl pa low level read tests [c:\home\pete\sw\dsl-pa\test\dsl-pa-test.cpp:196]
    ==========================
    ok: my_dsl_pa.get() == 'a'
    ok: my_dsl_pa.get() == 'b'
    ok: my_dsl_pa.current() == 'b'
    ok: my_dsl_pa.current() == 'b'
    ok: my_dsl_pa.location_push()
    ok: my_dsl_pa.unget()
    ok: my_dsl_pa.get() == 'b'
    ok: my_dsl_pa.unget( 'l' )
    ok: my_dsl_pa.get() == 'l'
    ok: my_dsl_pa.peek() == 'c'
    ok: my_dsl_pa.get() == 'c'
    ok: my_dsl_pa.get() == 'd'
    ok: my_dsl_pa.get() == 'e'
    ok: my_dsl_pa.location_top()
    ok: my_dsl_pa.get() == 'c'
    ok: my_dsl_pa.location_pop()
      : location_logger my_location_logger( my_dsl_pa.get_reader() )
    ok: ! my_dsl_pa.is_get_char( 'x' )
    ok: my_dsl_pa.is_get_char( 'd' )
    ok: my_dsl_pa.get() == 'e'
    ok: my_dsl_pa.location_top()
    ok: my_dsl_pa.get() == 'd'
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )


    dsl pa ws tests [c:\home\pete\sw\dsl-pa\test\dsl-pa-test.cpp:230]
    ==========================
    ok: pa.get() == 'a' && pa.get() == 'b' && pa.space()
    ok: pa.get() == 'c'
    ok: pa.get() == 'a' && pa.get() == 'b'
    ok: ! pa.space()
    ok: pa.get() == 'c'
    ok: pa.get() == 'a' && pa.get() == 'b' && pa.opt_space()
    ok: pa.get() == 'c'
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )


    dsl pa wsp tests [c:\home\pete\sw\dsl-pa\test\dsl-pa-test.cpp:263]
    ==========================
    ok: pa.get() == 'a' && pa.get() == 'b' && pa.wsp()
    ok: pa.get() == 'c'
    ok: pa.get() == 'a' && pa.get() == 'b'
    ok: ! pa.wsp()
    ok: pa.get() == 'c'
    ok: pa.get() == 'a' && pa.get() == 'b' && pa.opt_wsp()
    ok: pa.get() == 'c'
    ok: pa.get() == 'a' && pa.get() == 'b' && pa.wsp()
    ok: pa.get() == '\n' && pa.get() == 'c'
    ok: pa.get() == 'a' && pa.get() == 'b' && pa.opt_wsp()
    ok: pa.get() == '\n' && pa.get() == 'c'
    ok: pa.get() == 'a' && pa.get() == 'b' && pa.opt_wsp()
    ok: pa.get() == '\n' && pa.get() == 'c'
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )


    dsl pa get() tests [c:\home\pete\sw\dsl-pa\test\dsl-pa-test.cpp:323]
    ==========================
    ok: my_pa.get( &command, alphabet_word_char() ) && my_pa.space() && my_pa.get( &channel, alphabet_alpha() ) && my_pa.opt_space() && my_pa.is_get_char( '=' ) && my_pa.opt_space() && my_pa.get( &level, alphabet_digit() )
    ok: command == "Mode"
    ok: channel == "p"
    ok: level == "12"
    ok: my_pa.opt_space() && my_pa.get( &command, alphabet_word_char() ) == 4
    ok: command == "Mode"
    ok: my_pa.get( &command_1, alphabet_word_char(), 2 ) && my_pa.get( &command_2, alphabet_word_char() ) && my_pa.space() && my_pa.get( &channel, alphabet_alpha() ) && my_pa.opt_space() && my_pa.is_get_char( '=' ) && my_pa.opt_space() && my_pa.get( &level, alphabet_digit() )
    ok: command_1 == "Mo"
    ok: command_2 == "de"
    ok: channel == "p"
    ok: level == "12"
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )


    dsl pa get_until() tests [c:\home\pete\sw\dsl-pa\test\dsl-pa-test.cpp:384]
    ==========================
    ok: my_pa.get_until( &command, alphabet_space() ) && my_pa.space() && my_pa.get_until( &channel, alphabet_char_class( "=" ) ) && my_pa.opt_space() && my_pa.is_get_char( '=' ) && my_pa.opt_space() && my_pa.get_until( &level, alphabet_space() )
    ok: command == "Mode"
    ok: channel == "p"
    ok: level == "12"
    ok: my_pa.opt_space() && my_pa.get_until( &command, alphabet_space() ) == 4
    ok: command == "Mode"
    ok: my_pa.get_until( &channel, alphabet_char_class( "=" ) ) && my_pa.opt_space() && my_pa.is_get_char( '=' ) && my_pa.opt_space() && my_pa.is_get_char( '\'' ) && my_pa.get_escaped_until( &sentence, alphabet_char_class( "'" ), '\\' ) && my_pa.is_get_char( '\'' ) && my_pa.space() && my_pa.get_until( &level, alphabet_space() )
    ok: channel == "p"
    ok: sentence == "He's got it\\n all"
    ok: level == "12"
    ok: my_pa.get_bounded_until( &command_1, alphabet_space(), 2 ) && my_pa.get_until( &command_2, alphabet_space() ) && my_pa.space() && my_pa.get_until( &channel, alphabet_char_class( "=" ) ) && my_pa.opt_space() && my_pa.is_get_char( '=' ) && my_pa.opt_space() && my_pa.get_until( &level, alphabet_space() )
    ok: command_1 == "Mo"
    ok: command_2 == "de"
    ok: channel == "p"
    ok: level == "12"
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )


    dsl pa skip() tests [c:\home\pete\sw\dsl-pa\test\dsl-pa-test.cpp:468]
    ==========================
    ok: my_pa.skip( alphabet_word_char() ) && my_pa.space() && my_pa.get( &channel, alphabet_alpha() ) && my_pa.opt_space() && my_pa.is_get_char( '=' ) && my_pa.opt_space() && my_pa.get( &level, alphabet_digit() )
    ok: channel == "p"
    ok: level == "12"
    ok: my_pa.skip_until( alphabet_space() ) && my_pa.space() && my_pa.get_until( &channel, alphabet_char_class( "=" ) ) && my_pa.opt_space() && my_pa.is_get_char( '=' ) && my_pa.opt_space() && my_pa.get_until( &level, alphabet_space() )
    ok: channel == "p"
    ok: level == "12"
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )


    dsl pa fixed and ifixed tests [c:\home\pete\sw\dsl-pa\test\dsl-pa-test.cpp:511]
    ==========================
    ok: (my_pa.fixed( "Range" ) || my_pa.fixed( "Mode" )) && my_pa.space() && my_pa.get( &channel, alphabet_alpha() ) && my_pa.opt_space() && my_pa.is_get_char( '=' ) && my_pa.opt_space() && my_pa.get( &level, alphabet_digit() )
    ok: channel == "p"
    ok: level == "12"
    ok: (my_pa.ifixed( "rANGE" ) || my_pa.ifixed( "mODE" )) && my_pa.space() && my_pa.get( &channel, alphabet_alpha() ) && my_pa.opt_space() && my_pa.is_get_char( '=' ) && my_pa.opt_space() && my_pa.get( &level, alphabet_digit() )
    ok: channel == "p"
    ok: level == "12"
    ok: (my_pa.get_fixed( &command, "Range" ) || my_pa.get_fixed( &command, "Mode" ))
    ok: command == "Mode"
    ok: (my_pa.get_fixed( &command, "MyRange" ) || my_pa.get_fixed( &command, "MyMode" ))
    ok: command == "MyMode"
    ok: (my_pa.get_ifixed( &command, "rANGE" ) || my_pa.get_ifixed( &command, "mODE" ))
    ok: command == "Mode"
    ok: (my_pa.get_ifixed( &command, "MYrANGE" ) || my_pa.get_ifixed( &command, "MYmODE" ))
    ok: command == "MyMode"
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )


    dsl_pa::get_char() Tests [c:\home\pete\sw\dsl-pa\test\dsl-pa-test.cpp:600]
    ==========================
    ok: my_pa.get_char()
    ok: my_pa.current() == 'A'
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )


    dsl_pa::get_char_no_space() Tests [c:\home\pete\sw\dsl-pa\test\dsl-pa-test.cpp:612]
    ==========================
    ok: my_pa.get_char_no_space()
    ok: my_pa.current() == 'A'
    ok: my_pa.get_char_no_space()
    ok: my_pa.current() == 'B'
    ok: my_pa.get_char_no_space()
    ok: my_pa.current() == 'C'
    ok: my_pa.get_char_no_wsp()
    ok: my_pa.current() == 'A'
    ok: my_pa.get_char_no_wsp()
    ok: my_pa.current() == 'B'
    ok: my_pa.get_char_no_wsp()
    ok: my_pa.current() == 'C'
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )


    dsl_pa::peek_char_no_space() Tests [c:\home\pete\sw\dsl-pa\test\dsl-pa-test.cpp:639]
    ==========================
    ok: my_pa.peek_char_no_space()
    ok: my_pa.current() == 'A'
    ok: my_pa.get_char()
    ok: my_pa.current() == 'A'
    ok: my_pa.peek_char_no_space()
    ok: my_pa.current() == 'B'
    ok: my_pa.peek_char_no_space()
    ok: my_pa.current() == 'B'
    ok: my_pa.get_char()
    ok: my_pa.peek_char_no_space()
    ok: my_pa.current() == 'C'
    ok: my_pa.peek_char_no_wsp()
    ok: my_pa.current() == 'A'
    ok: my_pa.get_char()
    ok: my_pa.current() == 'A'
    ok: my_pa.peek_char_no_wsp()
    ok: my_pa.current() == 'B'
    ok: my_pa.peek_char_no_wsp()
    ok: my_pa.current() == 'B'
    ok: my_pa.get_char()
    ok: my_pa.peek_char_no_wsp()
    ok: my_pa.current() == 'C'
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )


    dsl_pa::get_char(...) Tests [c:\home\pete\sw\dsl-pa\test\dsl-pa-test.cpp:680]
    ==========================
    ok: my_pa.get_char( &c )
    ok: c == 'A'
    ok: my_pa.get_char( &out )
    ok: out == "A"
    ok: my_pa.read_char( &out )
    ok: out == "XYZA"
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )


    dsl_pa::get_bool() Tests [c:\home\pete\sw\dsl-pa\test\dsl-pa-test.cpp:734]
    ==========================
      Input: true
    ok: my_pa.get_bool( &result ) == (valid == TEST_VALID)
    ok: my_pa.get() == next_char
    ok: my_pa.get_bool( &result ) == (valid == TEST_VALID)
    ok: result == expected_value
    ok: my_pa.get() == next_char
      Input: true 
    ok: my_pa.get_bool( &result ) == (valid == TEST_VALID)
    ok: my_pa.get() == next_char
    ok: my_pa.get_bool( &result ) == (valid == TEST_VALID)
    ok: result == expected_value
    ok: my_pa.get() == next_char
      Input: false
    ok: my_pa.get_bool( &result ) == (valid == TEST_VALID)
    ok: my_pa.get() == next_char
    ok: my_pa.get_bool( &result ) == (valid == TEST_VALID)
    ok: result == expected_value
    ok: my_pa.get() == next_char
      Input: false 
    ok: my_pa.get_bool( &result ) == (valid == TEST_VALID)
    ok: my_pa.get() == next_char
    ok: my_pa.get_bool( &result ) == (valid == TEST_VALID)
    ok: result == expected_value
    ok: my_pa.get() == next_char
      Input: trunk 
    ok: my_pa.get_bool( &result ) == (valid == TEST_VALID)
    ok: my_pa.get() == next_char
    ok: my_pa.get_bool( &result ) == (valid == TEST_VALID)
    ok: my_pa.get() == next_char
      Input: junk 
    ok: my_pa.get_bool( &result ) == (valid == TEST_VALID)
    ok: my_pa.get() == next_char
    ok: my_pa.get_bool( &result ) == (valid == TEST_VALID)
    ok: my_pa.get() == next_char
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )


    dsl_pa::get_int() Tests [c:\home\pete\sw\dsl-pa\test\dsl-pa-test.cpp:759]
    ==========================
      Input: 100
    ok: my_pa.get_int( &result ) == n_chars
    ok: result == expected_value
      Input: -100
    ok: my_pa.get_int( &result ) == n_chars
    ok: result == expected_value
      Input: 0
    ok: my_pa.get_int( &result ) == n_chars
    ok: result == expected_value
      Input: -0
    ok: my_pa.get_int( &result ) == n_chars
    ok: result == expected_value
      Input: 000
    ok: my_pa.get_int( &result ) == n_chars
    ok: result == expected_value
      Input: -
    ok: my_pa.get_int( &result ) == n_chars
    ok: my_pa.get() == *p_input
      Input: +
    ok: my_pa.get_int( &result ) == n_chars
    ok: my_pa.get() == *p_input
      Input: --0
    ok: my_pa.get_int( &result ) == n_chars
    ok: my_pa.get() == *p_input
      Input: 
    ok: my_pa.get_int( &result ) == n_chars
    ok: my_pa.get() == *p_input
      Input: w
    ok: my_pa.get_int( &result ) == n_chars
    ok: my_pa.get() == *p_input
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )


    dsl_pa::get_uint() Tests [c:\home\pete\sw\dsl-pa\test\dsl-pa-test.cpp:789]
    ==========================
      Input: 100
    ok: my_pa.get_uint( &result ) == n_chars
    ok: result == expected_value
      Input: -100
    ok: my_pa.get_uint( &result ) == n_chars
    ok: result == expected_value
      Input: 0
    ok: my_pa.get_uint( &result ) == n_chars
    ok: result == expected_value
      Input: -0
    ok: my_pa.get_uint( &result ) == n_chars
    ok: result == expected_value
      Input: 000
    ok: my_pa.get_uint( &result ) == n_chars
    ok: result == expected_value
      Input: -
    ok: my_pa.get_uint( &result ) == n_chars
    ok: my_pa.get() == *p_input
      Input: +
    ok: my_pa.get_int( &result ) == n_chars
    ok: my_pa.get() == *p_input
      Input: --0
    ok: my_pa.get_int( &result ) == n_chars
    ok: my_pa.get() == *p_input
      Input: 
    ok: my_pa.get_uint( &result ) == n_chars
    ok: my_pa.get() == *p_input
      Input: w
    ok: my_pa.get_uint( &result ) == n_chars
    ok: my_pa.get() == *p_input
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )


    dsl_pa::get_float() Tests [c:\home\pete\sw\dsl-pa\test\dsl-pa-test.cpp:819]
    ==========================
      Input: 1
    ok: my_pa.get_float( &result ) == is_valid
    ok: result == expected_value
      Input: 1.0
    ok: my_pa.get_float( &result ) == is_valid
    ok: result == expected_value
      Input: 0.1
    ok: my_pa.get_float( &result ) == is_valid
    ok: result == expected_value
      Input: .1
    ok: my_pa.get_float( &result ) == is_valid
    ok: result == expected_value
      Input: -1
    ok: my_pa.get_float( &result ) == is_valid
    ok: result == expected_value
      Input: -1.0
    ok: my_pa.get_float( &result ) == is_valid
    ok: result == expected_value
      Input: -0.1
    ok: my_pa.get_float( &result ) == is_valid
    ok: result == expected_value
      Input: -.1
    ok: my_pa.get_float( &result ) == is_valid
    ok: result == expected_value
      Input: -
    ok: my_pa.get_float( &result ) == is_valid
    ok: my_pa.get() == *p_input
      Input: +
    ok: my_pa.get_int( &result ) == n_chars
    ok: my_pa.get() == *p_input
      Input: --0
    ok: my_pa.get_int( &result ) == n_chars
    ok: my_pa.get() == *p_input
      Input: .
    ok: my_pa.get_float( &result ) == is_valid
    ok: my_pa.get() == *p_input
      Input: 
    ok: my_pa.get_float( &result ) == is_valid
    ok: my_pa.get() == *p_input
      Input: w
    ok: my_pa.get_float( &result ) == is_valid
    ok: my_pa.get() == *p_input
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )


    dsl_pa::get_sci_float() Tests [c:\home\pete\sw\dsl-pa\test\dsl-pa-test.cpp:852]
    ==========================
      Input: 1 
    ok: my_pa.get_sci_float( &result ) == is_valid
    ok: result == expected_value
    ok: my_pa.get() == next_char
      Input: 1.0 
    ok: my_pa.get_sci_float( &result ) == is_valid
    ok: result == expected_value
    ok: my_pa.get() == next_char
      Input: 0.1 
    ok: my_pa.get_sci_float( &result ) == is_valid
    ok: result == expected_value
    ok: my_pa.get() == next_char
      Input: 1
    ok: my_pa.get_sci_float( &result ) == is_valid
    ok: result == expected_value
    ok: my_pa.get() == next_char
      Input: 1.0
    ok: my_pa.get_sci_float( &result ) == is_valid
    ok: result == expected_value
    ok: my_pa.get() == next_char
      Input: 0.1
    ok: my_pa.get_sci_float( &result ) == is_valid
    ok: result == expected_value
    ok: my_pa.get() == next_char
      Input: .1
    ok: my_pa.get_sci_float( &result ) == is_valid
    ok: result == expected_value
    ok: my_pa.get() == next_char
      Input: -1
    ok: my_pa.get_sci_float( &result ) == is_valid
    ok: result == expected_value
    ok: my_pa.get() == next_char
      Input: -1.0
    ok: my_pa.get_sci_float( &result ) == is_valid
    ok: result == expected_value
    ok: my_pa.get() == next_char
      Input: -0.1
    ok: my_pa.get_sci_float( &result ) == is_valid
    ok: result == expected_value
    ok: my_pa.get() == next_char
      Input: -.1
    ok: my_pa.get_sci_float( &result ) == is_valid
    ok: result == expected_value
    ok: my_pa.get() == next_char
      Input: 1e1
    ok: my_pa.get_sci_float( &result ) == is_valid
    ok: result == expected_value
    ok: my_pa.get() == next_char
      Input: 1e-1
    ok: my_pa.get_sci_float( &result ) == is_valid
    ok: result == expected_value
    ok: my_pa.get() == next_char
      Input: 1E1
    ok: my_pa.get_sci_float( &result ) == is_valid
    ok: result == expected_value
    ok: my_pa.get() == next_char
      Input: 1E-1
    ok: my_pa.get_sci_float( &result ) == is_valid
    ok: result == expected_value
    ok: my_pa.get() == next_char
      Input: 1e
    ok: my_pa.get_sci_float( &result ) == is_valid
    ok: result == expected_value
    ok: my_pa.get() == next_char
      Input: 1e-
    ok: my_pa.get_sci_float( &result ) == is_valid
    ok: result == expected_value
    ok: my_pa.get() == next_char
      Input: 1e+
    ok: my_pa.get_sci_float( &result ) == is_valid
    ok: result == expected_value
    ok: my_pa.get() == next_char
      Input: -
    ok: my_pa.get_sci_float( &result ) == is_valid
    ok: my_pa.get() == next_char
      Input: --1
    ok: my_pa.get_sci_float( &result ) == is_valid
    ok: my_pa.get() == next_char
      Input: .
    ok: my_pa.get_sci_float( &result ) == is_valid
    ok: my_pa.get() == next_char
      Input: -e
    ok: my_pa.get_sci_float( &result ) == is_valid
    ok: my_pa.get() == next_char
      Input: 
    ok: my_pa.get_sci_float( &result ) == is_valid
    ok: my_pa.get() == next_char
      Input: w
    ok: my_pa.get_sci_float( &result ) == is_valid
    ok: my_pa.get() == next_char
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )


    dsl_pa::current_is() Tests [c:\home\pete\sw\dsl-pa\test\dsl-pa-test.cpp:883]
    ==========================
    ok: my_pa.get_char()
    ok: my_pa.current_is( 'A' )
    ok: my_pa.get_char()
    ok: my_pa.current_is( 'A' )
    ok: my_pa.current_is_in( alphabet_char_class_ABX )
    ok: my_pa.get_char()
    ok: my_pa.current_is( 'B' )
    ok: my_pa.current_is_in( alphabet_char_class_ABX )
    ok: my_pa.get_char()
    ok: my_pa.current_is( 'C' )
    ok: ! my_pa.current_is_in( alphabet_char_class_ABX )
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )


    dsl_pa::peek_is() Tests [c:\home\pete\sw\dsl-pa\test\dsl-pa-test.cpp:913]
    ==========================
    ok: my_pa.peek_is( 'A' )
    ok: my_pa.peek_is( 'A' )
    ok: my_pa.peek_is( 'A' )
    ok: my_pa.peek_is_in( alphabet_char_class_ABX )
    ok: my_pa.get_char()
    ok: my_pa.peek_is( 'B' )
    ok: my_pa.peek_is_in( alphabet_char_class_ABX )
    ok: my_pa.get_char()
    ok: my_pa.peek_is( 'C' )
    ok: ! my_pa.peek_is_in( alphabet_char_class_ABX )
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )


    dsl_pa::peek_char() Tests [c:\home\pete\sw\dsl-pa\test\dsl-pa-test.cpp:942]
    ==========================
    ok: my_pa.peek_char()
    ok: my_pa.current_is( 'A' )
    ok: my_pa.current_is( 'A' )
    ok: ! my_pa.current_is( 'B' )
    ok: my_pa.peek_char()
    ok: my_pa.current_is( 'A' )
    ok: my_pa.current_is_in( alphabet_char_class_ABX )
    ok: my_pa.get_char()
    ok: my_pa.peek_char()
    ok: my_pa.peek_is( 'B' )
    ok: my_pa.current_is_in( alphabet_char_class_ABX )
    ok: my_pa.current_is_in( alphabet_char_class_ABX )
    ok: my_pa.get_char()
    ok: my_pa.peek_char()
    ok: my_pa.peek_is( 'C' )
    ok: ! my_pa.current_is_in( alphabet_char_class_ABX )
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )


    optional_sequence class Tests [c:\home\pete\sw\dsl-pa\test\dsl-pa-test.cpp:977]
    ==========================
    ok: my_pa.location_push() && my_pa.optional_rewind( my_pa.get_fixed( &command, "Mode" ) && my_pa.space() && my_pa.get_fixed( &type, "empty" ) && my_pa.set( is_empty_mode, true ) || my_pa.on_fail( my_pa.clear( command ) && my_pa.clear( type ) ) ) && my_pa.location_pop() && my_pa.get_fixed( &command, "Mode" ) && my_pa.space() && my_pa.get_fixed( &type, "full" )
    ok: command == "Mode"
    ok: is_empty_mode == false
    ok: type == "full"
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )


    DSL PA is_peek_at_end Tests [c:\home\pete\sw\dsl-pa\test\dsl-pa-test.cpp:1009]
    ==========================
    ok: my_pa.is_peek_at_end()
    ok: ! my_pa.is_peek_at_end()
    ok: my_pa.is_get_char( 'M' )
    ok: my_pa.is_peek_at_end()
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )


    DSL PA is_current_at_end Tests [c:\home\pete\sw\dsl-pa\test\dsl-pa-test.cpp:1028]
    ==========================
    ok: my_pa.get_char() == false
    ok: my_pa.is_current_at_end()
    ok: my_pa.get_char()
    ok: my_pa.current_is( 'M' )
    ok: ! my_pa.is_current_at_end()
    ok: my_pa.get_char() == false
    ok: my_pa.is_current_at_end()
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )


    DSL PA get vs. read check [c:\home\pete\sw\dsl-pa\test\dsl-pa-test.cpp:1050]
    ==========================
    ok: my_pa.read( &parsed, alphabet_char_class( "A" ) ) > 0
    ok: parsed == "originAAAAAA"
    ok: my_pa2.get( &parsed, alphabet_char_class( "A" ) ) > 0
    ok: parsed == "AAAAAA"
    ok: my_pa.read( &parsed, alphabet_char_class( "A" ), 20 ) > 0
    ok: parsed == "originAAAAAA"
    ok: my_pa2.get( &parsed, alphabet_char_class( "A" ), 20 ) > 0
    ok: parsed == "AAAAAA"
    ok: my_pa.read_until( &parsed, alphabet_char_class( "B" ) ) > 0
    ok: parsed == "originAAAAAA"
    ok: my_pa2.get_until( &parsed, alphabet_char_class( "B" ) ) > 0
    ok: parsed == "AAAAAA"
    ok: my_pa.read_bounded_until( &parsed, alphabet_char_class( "B" ), 20 ) > 0
    ok: parsed == "originAAAAAA"
    ok: my_pa2.get_bounded_until( &parsed, alphabet_char_class( "B" ), 20 ) > 0
    ok: parsed == "AAAAAA"
    ok: my_pa.read_escaped_until( &parsed, alphabet_char_class( "B" ), 'C' ) > 0
    ok: parsed == "originAAAAAA"
    ok: my_pa2.get_escaped_until( &parsed, alphabet_char_class( "B" ), 'C' ) > 0
    ok: parsed == "AAAAAA"
    ok: my_pa.read_until( &parsed, alphabet_char_class( "B" ), 'C', 20 ) > 0
    ok: parsed == "originAAAAAA"
    ok: my_pa2.get_until( &parsed, alphabet_char_class( "B" ), 'C', 20 ) > 0
    ok: parsed == "AAAAAA"
    ok: my_pa.read_fixed( &parsed, "left" ) && my_pa.space() && my_pa.read_fixed( &parsed, "right" )
    ok: parsed == "leftright"
    ok: my_pa2.get_fixed( &parsed, "left" ) && my_pa2.space() && my_pa2.get_fixed( &parsed, "right" )
    ok: parsed == "right"
    ok: my_pa.read_ifixed( &parsed, "LEFT" ) && my_pa.space() && my_pa.read_ifixed( &parsed, "RIGHT" )
    ok: parsed == "leftright"
    ok: my_pa2.get_ifixed( &parsed, "LEFT" ) && my_pa2.space() && my_pa2.get_ifixed( &parsed, "RIGHT" )
    ok: parsed == "right"
    ok: my_pa.read_bool( &parsed ) && my_pa.space() && my_pa.read_bool( &parsed )
    ok: parsed == "truefalse"
    ok: my_pa2.get_bool( &parsed ) && my_pa2.space() && my_pa2.get_bool( &parsed )
    ok: parsed == "false"
    ok: my_pa.read_int( &parsed ) && my_pa.space() && my_pa.read_int( &parsed )
    ok: parsed == "123456"
    ok: my_pa2.get_int( &parsed ) && my_pa2.space() && my_pa2.get_int( &parsed )
    ok: parsed == "456"
    ok: my_pa.read_uint( &parsed ) && my_pa.space() && my_pa.read_uint( &parsed )
    ok: parsed == "123456"
    ok: my_pa2.get_uint( &parsed ) && my_pa2.space() && my_pa2.get_uint( &parsed )
    ok: parsed == "456"
    ok: my_pa.read_float( &parsed ) && my_pa.space() && my_pa.read_float( &parsed )
    ok: parsed == "123456"
    ok: my_pa2.get_float( &parsed ) && my_pa2.space() && my_pa2.get_float( &parsed )
    ok: parsed == "456"
    ok: my_pa.read_sci_float( &parsed ) && my_pa.space() && my_pa.read_sci_float( &parsed )
    ok: parsed == "123456"
    ok: my_pa2.get_sci_float( &parsed ) && my_pa2.space() && my_pa2.get_sci_float( &parsed )
    ok: parsed == "456"
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )


    String reader tests [c:\home\pete\sw\dsl-pa\test\reader-test.cpp:355]
    ==========================
    String reader basic tests [c:\home\pete\sw\dsl-pa\test\reader-test.cpp:101]
    ==========================
      : std::auto_ptr< reader > p_reader( r_reader_factory.create( "abc d" ) )
    ok: p_reader.get() != 0
    ok: p_reader->get() == 'a'
    ok: p_reader->current() == 'a'
    ok: p_reader->current() == 'a'
    ok: p_reader->get() == 'b'
    ok: p_reader->current() == 'b'
    ok: p_reader->get() == 'c'
    ok: p_reader->get() == ' '
    ok: p_reader->get() == 'd'
    ok: p_reader->get() == reader::R_EOI
    ok: p_reader->current() == reader::R_EOI
      : std::auto_ptr< reader > p_reader_empty( r_reader_factory.create( "" ) )
    ok: p_reader_empty.get() != 0
    ok: p_reader_empty->get() == reader::R_EOI
    ok: p_reader_empty->current() == reader::R_EOI
    String reader location tests [c:\home\pete\sw\dsl-pa\test\reader-test.cpp:128]
    ==========================
      : std::auto_ptr< reader > p_reader( r_reader_factory.create( "abcdef" ) )
    ok: p_reader.get() != 0
    ok: p_reader->get() == 'a'
    ok: p_reader->current() == 'a'
    ok: p_reader->current() == 'a'
    ok: p_reader->get() == 'b'
    ok: p_reader->current() == 'b'
    ok: p_reader->location_push()
    ok: p_reader->get() == 'c'
    ok: p_reader->get() == 'd'
    ok: p_reader->location_push()
    ok: p_reader->get() == 'e'
    ok: p_reader->get() == 'f'
    ok: p_reader->get() == reader::R_EOI
    ok: p_reader->get() == reader::R_EOI
    ok: p_reader->location_top()
    ok: p_reader->get() == 'e'
    ok: p_reader->get() == 'f'
    ok: p_reader->location_top()
    ok: p_reader->get() == 'e'
    ok: p_reader->get() == 'f'
    ok: p_reader->location_pop()
    ok: p_reader->location_top()
    ok: p_reader->get() == 'c'
    ok: p_reader->get() == 'd'
    String reader location with newline tests [c:\home\pete\sw\dsl-pa\test\reader-test.cpp:168]
    ==========================
      : std::auto_ptr< reader > p_reader( r_reader_factory.create( "abc\ndef" ) )
    ok: p_reader.get() != 0
    ok: p_reader->get() == 'a'
    ok: p_reader->get() == 'b'
    ok: p_reader->location_push()
    ok: p_reader->get() == 'c'
    ok: p_reader->get() == '\n'
    ok: p_reader->get() == 'd'
    ok: p_reader->location_push()
    ok: p_reader->get() == 'e'
    ok: p_reader->get() == 'f'
    ok: p_reader->location_top()
    ok: p_reader->get() == 'e'
    ok: p_reader->location_pop()
    ok: p_reader->location_top()
    ok: p_reader->get() == 'c'
      : std::auto_ptr< reader > p_reader( r_reader_factory.create( "abc\r\ndef" ) )
    ok: p_reader.get() != 0
    ok: p_reader->get() == 'a'
    ok: p_reader->get() == 'b'
    ok: p_reader->location_push()
    ok: p_reader->get() == 'c'
    ok: p_reader->get() == '\r'
    ok: p_reader->get() == '\n'
    ok: p_reader->get() == 'd'
    ok: p_reader->location_push()
    ok: p_reader->get() == 'e'
    ok: p_reader->get() == 'f'
    ok: p_reader->location_top()
    ok: p_reader->get() == 'e'
    ok: p_reader->location_pop()
    ok: p_reader->location_top()
    ok: p_reader->get() == 'c'
    String reader unget/peek tests [c:\home\pete\sw\dsl-pa\test\reader-test.cpp:228]
    ==========================
      : std::auto_ptr< reader > p_reader( r_reader_factory.create( "abcdef" ) )
    ok: p_reader.get() != 0
    ok: p_reader->get() == 'a'
    ok: p_reader->get() == 'b'
      : p_reader->unget()
    ok: p_reader->current() == 'b'
    ok: p_reader->get() == 'b'
      : p_reader->unget()
    ok: p_reader->current() == 'b'
    ok: p_reader->get() == 'b'
      : p_reader->unget( 'z' )
      : p_reader->unget( 'y' )
    ok: p_reader->current() == 'b'
    ok: p_reader->get() == 'y'
    ok: p_reader->get() == 'z'
      Test peek()
    ok: p_reader->get() == 'c'
    ok: p_reader->peek() == 'd'
    ok: p_reader->peek() == 'd'
    ok: p_reader->get() == 'd'
    ok: p_reader->peek() == 'e'
    ok: p_reader->get() == 'e'
    String reader location tests [c:\home\pete\sw\dsl-pa\test\reader-test.cpp:258]
    ==========================
      : std::auto_ptr< reader > p_reader( r_reader_factory.create( "abcdef" ) )
    ok: p_reader.get() != 0
    ok: p_reader->get() == 'a'
    ok: p_reader->get() == 'b'
    ok: p_reader->get() == 'c'
      : p_reader->unget()
    ok: p_reader->location_push()
    ok: p_reader->get() == 'c'
    ok: p_reader->get() == 'd'
    ok: p_reader->get() == 'e'
    ok: p_reader->location_top()
    ok: p_reader->get() == 'c'
      : std::auto_ptr< reader > p_reader( r_reader_factory.create( "abc" ) )
    ok: p_reader.get() != 0
    ok: p_reader->get() == 'a'
    ok: p_reader->get() == 'b'
    ok: p_reader->get() == 'c'
    ok: p_reader->get() == '\0'
      : p_reader->unget()
    ok: p_reader->location_push()
    ok: p_reader->get() == '\0'
    ok: p_reader->location_top()
    ok: p_reader->get() == '\0'
    String reader location logger tests [c:\home\pete\sw\dsl-pa\test\reader-test.cpp:306]
    ==========================
      : std::auto_ptr< reader > p_reader( r_reader_factory.create( "abcdef" ) )
    ok: p_reader.get() != 0
    ok: p_reader->get() == 'a'
    ok: p_reader->current() == 'a'
    ok: p_reader->current() == 'a'
    ok: p_reader->get() == 'b'
    ok: p_reader->current() == 'b'
    ok: p_reader->location_push()
    ok: p_reader->get() == 'c'
    ok: p_reader->get() == 'd'
      : location_logger my_location_logger( *p_reader )
    ok: p_reader->get() == 'e'
    ok: p_reader->get() == 'f'
    ok: p_reader->get() == reader::R_EOI
    ok: p_reader->get() == reader::R_EOI
    ok: p_reader->location_top()
    ok: p_reader->get() == 'e'
    ok: p_reader->get() == 'f'
    ok: p_reader->location_top()
    ok: p_reader->get() == 'e'
    ok: p_reader->get() == 'f'
    ok: p_reader->location_top()
    ok: p_reader->get() == 'c'
    ok: p_reader->get() == 'd'
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )


    File reader tests [c:\home\pete\sw\dsl-pa\test\reader-test.cpp:362]
    ==========================
    File reader basic tests [c:\home\pete\sw\dsl-pa\test\reader-test.cpp:101]
    ==========================
      : std::auto_ptr< reader > p_reader( r_reader_factory.create( "abc d" ) )
    ok: fout.is_open()
    ok: p_reader.get() != 0
    ok: p_reader->get() == 'a'
    ok: p_reader->current() == 'a'
    ok: p_reader->current() == 'a'
    ok: p_reader->get() == 'b'
    ok: p_reader->current() == 'b'
    ok: p_reader->get() == 'c'
    ok: p_reader->get() == ' '
    ok: p_reader->get() == 'd'
    ok: p_reader->get() == reader::R_EOI
    ok: p_reader->current() == reader::R_EOI
      : std::auto_ptr< reader > p_reader_empty( r_reader_factory.create( "" ) )
    ok: fout.is_open()
    ok: p_reader_empty.get() != 0
    ok: p_reader_empty->get() == reader::R_EOI
    ok: p_reader_empty->current() == reader::R_EOI
    File reader location tests [c:\home\pete\sw\dsl-pa\test\reader-test.cpp:128]
    ==========================
      : std::auto_ptr< reader > p_reader( r_reader_factory.create( "abcdef" ) )
    ok: fout.is_open()
    ok: p_reader.get() != 0
    ok: p_reader->get() == 'a'
    ok: p_reader->current() == 'a'
    ok: p_reader->current() == 'a'
    ok: p_reader->get() == 'b'
    ok: p_reader->current() == 'b'
    ok: p_reader->location_push()
    ok: p_reader->get() == 'c'
    ok: p_reader->get() == 'd'
    ok: p_reader->location_push()
    ok: p_reader->get() == 'e'
    ok: p_reader->get() == 'f'
    ok: p_reader->get() == reader::R_EOI
    ok: p_reader->get() == reader::R_EOI
    ok: p_reader->location_top()
    ok: p_reader->get() == 'e'
    ok: p_reader->get() == 'f'
    ok: p_reader->location_top()
    ok: p_reader->get() == 'e'
    ok: p_reader->get() == 'f'
    ok: p_reader->location_pop()
    ok: p_reader->location_top()
    ok: p_reader->get() == 'c'
    ok: p_reader->get() == 'd'
    File reader location with newline tests [c:\home\pete\sw\dsl-pa\test\reader-test.cpp:168]
    ==========================
      : std::auto_ptr< reader > p_reader( r_reader_factory.create( "abc\ndef" ) )
    ok: fout.is_open()
    ok: p_reader.get() != 0
    ok: p_reader->get() == 'a'
    ok: p_reader->get() == 'b'
    ok: p_reader->location_push()
    ok: p_reader->get() == 'c'
    ok: p_reader->get() == '\n'
    ok: p_reader->get() == 'd'
    ok: p_reader->location_push()
    ok: p_reader->get() == 'e'
    ok: p_reader->get() == 'f'
    ok: p_reader->location_top()
    ok: p_reader->get() == 'e'
    ok: p_reader->location_pop()
    ok: p_reader->location_top()
    ok: p_reader->get() == 'c'
      : std::auto_ptr< reader > p_reader( r_reader_factory.create( "abc\r\ndef" ) )
    ok: fout.is_open()
    ok: p_reader.get() != 0
    ok: p_reader->get() == 'a'
    ok: p_reader->get() == 'b'
    ok: p_reader->location_push()
    ok: p_reader->get() == 'c'
    ok: p_reader->get() == '\r'
    ok: p_reader->get() == '\n'
    ok: p_reader->get() == 'd'
    ok: p_reader->location_push()
    ok: p_reader->get() == 'e'
    ok: p_reader->get() == 'f'
    ok: p_reader->location_top()
    ok: p_reader->get() == 'e'
    ok: p_reader->location_pop()
    ok: p_reader->location_top()
    ok: p_reader->get() == 'c'
    File reader unget/peek tests [c:\home\pete\sw\dsl-pa\test\reader-test.cpp:228]
    ==========================
      : std::auto_ptr< reader > p_reader( r_reader_factory.create( "abcdef" ) )
    ok: fout.is_open()
    ok: p_reader.get() != 0
    ok: p_reader->get() == 'a'
    ok: p_reader->get() == 'b'
      : p_reader->unget()
    ok: p_reader->current() == 'b'
    ok: p_reader->get() == 'b'
      : p_reader->unget()
    ok: p_reader->current() == 'b'
    ok: p_reader->get() == 'b'
      : p_reader->unget( 'z' )
      : p_reader->unget( 'y' )
    ok: p_reader->current() == 'b'
    ok: p_reader->get() == 'y'
    ok: p_reader->get() == 'z'
      Test peek()
    ok: p_reader->get() == 'c'
    ok: p_reader->peek() == 'd'
    ok: p_reader->peek() == 'd'
    ok: p_reader->get() == 'd'
    ok: p_reader->peek() == 'e'
    ok: p_reader->get() == 'e'
    File reader location tests [c:\home\pete\sw\dsl-pa\test\reader-test.cpp:258]
    ==========================
      : std::auto_ptr< reader > p_reader( r_reader_factory.create( "abcdef" ) )
    ok: fout.is_open()
    ok: p_reader.get() != 0
    ok: p_reader->get() == 'a'
    ok: p_reader->get() == 'b'
    ok: p_reader->get() == 'c'
      : p_reader->unget()
    ok: p_reader->location_push()
    ok: p_reader->get() == 'c'
    ok: p_reader->get() == 'd'
    ok: p_reader->get() == 'e'
    ok: p_reader->location_top()
    ok: p_reader->get() == 'c'
      : std::auto_ptr< reader > p_reader( r_reader_factory.create( "abc" ) )
    ok: fout.is_open()
    ok: p_reader.get() != 0
    ok: p_reader->get() == 'a'
    ok: p_reader->get() == 'b'
    ok: p_reader->get() == 'c'
    ok: p_reader->get() == '\0'
      : p_reader->unget()
    ok: p_reader->location_push()
    ok: p_reader->get() == '\0'
    ok: p_reader->location_top()
    ok: p_reader->get() == '\0'
    File reader location logger tests [c:\home\pete\sw\dsl-pa\test\reader-test.cpp:306]
    ==========================
      : std::auto_ptr< reader > p_reader( r_reader_factory.create( "abcdef" ) )
    ok: fout.is_open()
    ok: p_reader.get() != 0
    ok: p_reader->get() == 'a'
    ok: p_reader->current() == 'a'
    ok: p_reader->current() == 'a'
    ok: p_reader->get() == 'b'
    ok: p_reader->current() == 'b'
    ok: p_reader->location_push()
    ok: p_reader->get() == 'c'
    ok: p_reader->get() == 'd'
      : location_logger my_location_logger( *p_reader )
    ok: p_reader->get() == 'e'
    ok: p_reader->get() == 'f'
    ok: p_reader->get() == reader::R_EOI
    ok: p_reader->get() == reader::R_EOI
    ok: p_reader->location_top()
    ok: p_reader->get() == 'e'
    ok: p_reader->get() == 'f'
    ok: p_reader->location_top()
    ok: p_reader->get() == 'e'
    ok: p_reader->get() == 'f'
    ok: p_reader->location_top()
    ok: p_reader->get() == 'c'
    ok: p_reader->get() == 'd'
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )


    Mem buf reader tests [c:\home\pete\sw\dsl-pa\test\reader-test.cpp:369]
    ==========================
    Mem buf reader basic tests [c:\home\pete\sw\dsl-pa\test\reader-test.cpp:101]
    ==========================
      : std::auto_ptr< reader > p_reader( r_reader_factory.create( "abc d" ) )
    ok: p_reader.get() != 0
    ok: p_reader->get() == 'a'
    ok: p_reader->current() == 'a'
    ok: p_reader->current() == 'a'
    ok: p_reader->get() == 'b'
    ok: p_reader->current() == 'b'
    ok: p_reader->get() == 'c'
    ok: p_reader->get() == ' '
    ok: p_reader->get() == 'd'
    ok: p_reader->get() == reader::R_EOI
    ok: p_reader->current() == reader::R_EOI
      : std::auto_ptr< reader > p_reader_empty( r_reader_factory.create( "" ) )
    ok: p_reader_empty.get() != 0
    ok: p_reader_empty->get() == reader::R_EOI
    ok: p_reader_empty->current() == reader::R_EOI
    Mem buf reader location tests [c:\home\pete\sw\dsl-pa\test\reader-test.cpp:128]
    ==========================
      : std::auto_ptr< reader > p_reader( r_reader_factory.create( "abcdef" ) )
    ok: p_reader.get() != 0
    ok: p_reader->get() == 'a'
    ok: p_reader->current() == 'a'
    ok: p_reader->current() == 'a'
    ok: p_reader->get() == 'b'
    ok: p_reader->current() == 'b'
    ok: p_reader->location_push()
    ok: p_reader->get() == 'c'
    ok: p_reader->get() == 'd'
    ok: p_reader->location_push()
    ok: p_reader->get() == 'e'
    ok: p_reader->get() == 'f'
    ok: p_reader->get() == reader::R_EOI
    ok: p_reader->get() == reader::R_EOI
    ok: p_reader->location_top()
    ok: p_reader->get() == 'e'
    ok: p_reader->get() == 'f'
    ok: p_reader->location_top()
    ok: p_reader->get() == 'e'
    ok: p_reader->get() == 'f'
    ok: p_reader->location_pop()
    ok: p_reader->location_top()
    ok: p_reader->get() == 'c'
    ok: p_reader->get() == 'd'
    Mem buf reader location with newline tests [c:\home\pete\sw\dsl-pa\test\reader-test.cpp:168]
    ==========================
      : std::auto_ptr< reader > p_reader( r_reader_factory.create( "abc\ndef" ) )
    ok: p_reader.get() != 0
    ok: p_reader->get() == 'a'
    ok: p_reader->get() == 'b'
    ok: p_reader->location_push()
    ok: p_reader->get() == 'c'
    ok: p_reader->get() == '\n'
    ok: p_reader->get() == 'd'
    ok: p_reader->location_push()
    ok: p_reader->get() == 'e'
    ok: p_reader->get() == 'f'
    ok: p_reader->location_top()
    ok: p_reader->get() == 'e'
    ok: p_reader->location_pop()
    ok: p_reader->location_top()
    ok: p_reader->get() == 'c'
      : std::auto_ptr< reader > p_reader( r_reader_factory.create( "abc\r\ndef" ) )
    ok: p_reader.get() != 0
    ok: p_reader->get() == 'a'
    ok: p_reader->get() == 'b'
    ok: p_reader->location_push()
    ok: p_reader->get() == 'c'
    ok: p_reader->get() == '\r'
    ok: p_reader->get() == '\n'
    ok: p_reader->get() == 'd'
    ok: p_reader->location_push()
    ok: p_reader->get() == 'e'
    ok: p_reader->get() == 'f'
    ok: p_reader->location_top()
    ok: p_reader->get() == 'e'
    ok: p_reader->location_pop()
    ok: p_reader->location_top()
    ok: p_reader->get() == 'c'
    Mem buf reader unget/peek tests [c:\home\pete\sw\dsl-pa\test\reader-test.cpp:228]
    ==========================
      : std::auto_ptr< reader > p_reader( r_reader_factory.create( "abcdef" ) )
    ok: p_reader.get() != 0
    ok: p_reader->get() == 'a'
    ok: p_reader->get() == 'b'
      : p_reader->unget()
    ok: p_reader->current() == 'b'
    ok: p_reader->get() == 'b'
      : p_reader->unget()
    ok: p_reader->current() == 'b'
    ok: p_reader->get() == 'b'
      : p_reader->unget( 'z' )
      : p_reader->unget( 'y' )
    ok: p_reader->current() == 'b'
    ok: p_reader->get() == 'y'
    ok: p_reader->get() == 'z'
      Test peek()
    ok: p_reader->get() == 'c'
    ok: p_reader->peek() == 'd'
    ok: p_reader->peek() == 'd'
    ok: p_reader->get() == 'd'
    ok: p_reader->peek() == 'e'
    ok: p_reader->get() == 'e'
    Mem buf reader location tests [c:\home\pete\sw\dsl-pa\test\reader-test.cpp:258]
    ==========================
      : std::auto_ptr< reader > p_reader( r_reader_factory.create( "abcdef" ) )
    ok: p_reader.get() != 0
    ok: p_reader->get() == 'a'
    ok: p_reader->get() == 'b'
    ok: p_reader->get() == 'c'
      : p_reader->unget()
    ok: p_reader->location_push()
    ok: p_reader->get() == 'c'
    ok: p_reader->get() == 'd'
    ok: p_reader->get() == 'e'
    ok: p_reader->location_top()
    ok: p_reader->get() == 'c'
      : std::auto_ptr< reader > p_reader( r_reader_factory.create( "abc" ) )
    ok: p_reader.get() != 0
    ok: p_reader->get() == 'a'
    ok: p_reader->get() == 'b'
    ok: p_reader->get() == 'c'
    ok: p_reader->get() == '\0'
      : p_reader->unget()
    ok: p_reader->location_push()
    ok: p_reader->get() == '\0'
    ok: p_reader->location_top()
    ok: p_reader->get() == '\0'
    Mem buf reader location logger tests [c:\home\pete\sw\dsl-pa\test\reader-test.cpp:306]
    ==========================
      : std::auto_ptr< reader > p_reader( r_reader_factory.create( "abcdef" ) )
    ok: p_reader.get() != 0
    ok: p_reader->get() == 'a'
    ok: p_reader->current() == 'a'
    ok: p_reader->current() == 'a'
    ok: p_reader->get() == 'b'
    ok: p_reader->current() == 'b'
    ok: p_reader->location_push()
    ok: p_reader->get() == 'c'
    ok: p_reader->get() == 'd'
      : location_logger my_location_logger( *p_reader )
    ok: p_reader->get() == 'e'
    ok: p_reader->get() == 'f'
    ok: p_reader->get() == reader::R_EOI
    ok: p_reader->get() == reader::R_EOI
    ok: p_reader->location_top()
    ok: p_reader->get() == 'e'
    ok: p_reader->get() == 'f'
    ok: p_reader->location_top()
    ok: p_reader->get() == 'e'
    ok: p_reader->get() == 'f'
    ok: p_reader->location_top()
    ok: p_reader->get() == 'c'
    ok: p_reader->get() == 'd'
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )


    is get char reader tests [c:\home\pete\sw\dsl-pa\test\reader-test.cpp:376]
    ==========================
    ok: ! my_reader.is_get_char( 'x' )
    ok: my_reader.is_get_char( 'a' )
    ok: ! my_reader.is_get_char( 'x' )
    ok: my_reader.is_get_char( 'b' )
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )


    Reader line counting tests [c:\home\pete\sw\dsl-pa\test\reader-test.cpp:388]
    ==========================
    ok: my_reader.get_line_number() == 1
    ok: my_reader.get() == 'a'
    ok: my_reader.get() == 'b'
    ok: my_reader.get_line_number() == 1
    ok: my_reader.get() == '\r'
    ok: my_reader.get() == '\n'
    ok: my_reader.get_line_number() == 2
    ok: my_reader.get() == 'c'
    ok: my_reader.get_line_number() == 2
      : my_reader.location_push()
    ok: my_reader.get() == 'd'
    ok: my_reader.get_line_number() == 2
    ok: my_reader.get() == '\n'
    ok: my_reader.get_line_number() == 3
    ok: my_reader.get() == 'e'
    ok: my_reader.get_line_number() == 3
    ok: my_reader.get() == 'f'
    ok: my_reader.get_line_number() == 3
    ok: my_reader.get() == '\r'
    ok: my_reader.get_line_number() == 4
      : my_reader.unget()
    ok: my_reader.get() == '\r'
    ok: my_reader.get_line_number() == 4
    ok: my_reader.get() == 'g'
    ok: my_reader.get_line_number() == 4
    ok: my_reader.get() == 'h'
    ok: my_reader.get_line_number() == 4
    ok: my_reader.get() == '\r'
    ok: my_reader.get_line_number() == 5
    ok: my_reader.get() == '\n'
    ok: my_reader.get_line_number() == 5
    ok: my_reader.get() == 'i'
    ok: my_reader.get_line_number() == 5
    ok: my_reader.get() == 'j'
      : my_reader.location_top()
    ok: my_reader.get() == 'd'
    ok: my_reader.get_line_number() == 2
    ok: my_reader.get() == '\n'
    ok: my_reader.get_line_number() == 3
      : my_reader.location_top()
    ok: my_reader.get() == 'd'
    ok: my_reader.get_line_number() == 2
    ok: my_reader.get() == '\n'
    ok: my_reader.get_line_number() == 3
      : my_reader.location_pop()
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )


    Reader::is_open() tests [c:\home\pete\sw\dsl-pa\test\reader-test.cpp:444]
    ==========================
    ok: my_reader.is_open()
    ok: ! my_reader.is_open()
    ok: fout.is_open()
    ok: p_reader->is_open()
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )
    ok: _CrtCheckMemory() != 0
0 error(s), 0 todo(s), 1173 test(s)
